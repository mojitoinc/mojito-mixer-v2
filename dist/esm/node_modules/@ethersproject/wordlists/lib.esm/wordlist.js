import { id } from '../../hash/lib.esm/id.js';
import '../../hash/lib.esm/namehash.js';
import '../../bytes/lib.esm/index.js';
import 'js-sha3';
import '../../bignumber/lib.esm/bignumber.js';
import '../../bignumber/lib.esm/fixednumber.js';
import '../../strings/lib.esm/utf8.js';
import '../../strings/lib.esm/idna.js';
import '../../hash/lib.esm/typed-data.js';
import { defineReadOnly } from '../../properties/lib.esm/index.js';
import { Logger } from '../../logger/lib.esm/index.js';
import { version } from './_version.js';

const logger = new Logger(version);
class Wordlist {
    constructor(locale) {
        logger.checkAbstract(new.target, Wordlist);
        defineReadOnly(this, "locale", locale);
    }
    // Subclasses may override this
    split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
    }
    // Subclasses may override this
    join(words) {
        return words.join(" ");
    }
    static check(wordlist) {
        const words = [];
        for (let i = 0; i < 2048; i++) {
            const word = wordlist.getWord(i);
            /* istanbul ignore if */
            if (i !== wordlist.getWordIndex(word)) {
                return "0x";
            }
            words.push(word);
        }
        return id(words.join("\n") + "\n");
    }
    static register(lang, name) {
        if (!name) {
            name = lang.locale;
        }
    }
}

export { Wordlist, logger };
//# sourceMappingURL=wordlist.js.map

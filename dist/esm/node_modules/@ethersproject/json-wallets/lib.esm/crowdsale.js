import aes from 'aes-js';
import { getAddress } from '../../address/lib.esm/index.js';
import { arrayify } from '../../bytes/lib.esm/index.js';
import { keccak256 } from '../../keccak256/lib.esm/index.js';
import { pbkdf2 } from '../../pbkdf2/lib.esm/pbkdf2.js';
import '../../bignumber/lib.esm/bignumber.js';
import '../../bignumber/lib.esm/fixednumber.js';
import { toUtf8Bytes } from '../../strings/lib.esm/utf8.js';
import '../../strings/lib.esm/idna.js';
import { Description } from '../../properties/lib.esm/index.js';
import { Logger } from '../../logger/lib.esm/index.js';
import { version } from './_version.js';
import { getPassword, searchPath, looseArrayify } from './utils.js';

const logger = new Logger(version);
class CrowdsaleAccount extends Description {
    isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
    }
}
// See: https://github.com/ethereum/pyethsaletool
function decrypt(json, password) {
    const data = JSON.parse(json);
    password = getPassword(password);
    // Ethereum Address
    const ethaddr = getAddress(searchPath(data, "ethaddr"));
    // Encrypted Seed
    const encseed = looseArrayify(searchPath(data, "encseed"));
    if (!encseed || (encseed.length % 16) !== 0) {
        logger.throwArgumentError("invalid encseed", "json", json);
    }
    const key = arrayify(pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    // Decrypt the seed
    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);
    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
    // This wallet format is weird... Convert the binary encoded hex to a string.
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = toUtf8Bytes(seedHex);
    const privateKey = keccak256(seedHexBytes);
    return new CrowdsaleAccount({
        _isCrowdsaleAccount: true,
        address: ethaddr,
        privateKey: privateKey
    });
}

export { CrowdsaleAccount, decrypt };
//# sourceMappingURL=crowdsale.js.map

import { decrypt } from './crowdsale.js';
export { decrypt as decryptCrowdsale } from './crowdsale.js';
import { isCrowdsaleWallet, isKeystoreWallet } from './inspect.js';
export { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from './inspect.js';
import { decrypt as decrypt$1, decryptSync } from './keystore.js';
export { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from './keystore.js';

function decryptJsonWallet(json, password, progressCallback) {
    if (isCrowdsaleWallet(json)) {
        if (progressCallback) {
            progressCallback(0);
        }
        const account = decrypt(json, password);
        if (progressCallback) {
            progressCallback(1);
        }
        return Promise.resolve(account);
    }
    if (isKeystoreWallet(json)) {
        return decrypt$1(json, password, progressCallback);
    }
    return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
    if (isCrowdsaleWallet(json)) {
        return decrypt(json, password);
    }
    if (isKeystoreWallet(json)) {
        return decryptSync(json, password);
    }
    throw new Error("invalid JSON wallet");
}

export { decryptJsonWallet, decryptJsonWalletSync };
//# sourceMappingURL=index.js.map

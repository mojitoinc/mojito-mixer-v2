import '../../../bignumber/lib.esm/bignumber.js';
import '../../../bignumber/lib.esm/fixednumber.js';
import '../../../bytes/lib.esm/index.js';
import { toUtf8Bytes, toUtf8String } from '../../../strings/lib.esm/utf8.js';
import '../../../strings/lib.esm/idna.js';
import { DynamicBytesCoder } from './bytes.js';

class StringCoder extends DynamicBytesCoder {
    constructor(localName) {
        super("string", localName);
    }
    defaultValue() {
        return "";
    }
    encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
        return toUtf8String(super.decode(reader));
    }
}

export { StringCoder };
//# sourceMappingURL=string.js.map

{"version":3,"file":"json-rpc-batch-provider.js","sources":["../../../../../../node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"],"sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map"],"names":[],"mappings":"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"}
export { Provider } from '../../abstract-provider/lib.esm/index.js';
import { getNetwork } from '../../networks/lib.esm/index.js';
export { getNetwork } from '../../networks/lib.esm/index.js';
export { BaseProvider, Resolver } from './base-provider.js';
import { AlchemyProvider } from './alchemy-provider.js';
export { AlchemyProvider, AlchemyWebSocketProvider } from './alchemy-provider.js';
import { AnkrProvider } from './ankr-provider.js';
export { AnkrProvider } from './ankr-provider.js';
import { CloudflareProvider } from './cloudflare-provider.js';
export { CloudflareProvider } from './cloudflare-provider.js';
import { EtherscanProvider } from './etherscan-provider.js';
export { EtherscanProvider } from './etherscan-provider.js';
import { FallbackProvider } from './fallback-provider.js';
export { FallbackProvider } from './fallback-provider.js';
import { IpcProvider } from './ipc-provider.js';
export { IpcProvider } from './ipc-provider.js';
import { InfuraProvider } from './infura-provider.js';
export { InfuraProvider, InfuraWebSocketProvider } from './infura-provider.js';
import { JsonRpcProvider } from './json-rpc-provider.js';
export { JsonRpcProvider, JsonRpcSigner } from './json-rpc-provider.js';
export { JsonRpcBatchProvider } from './json-rpc-batch-provider.js';
import { NodesmithProvider } from './nodesmith-provider.js';
export { NodesmithProvider } from './nodesmith-provider.js';
import { PocketProvider } from './pocket-provider.js';
export { PocketProvider } from './pocket-provider.js';
export { StaticJsonRpcProvider, UrlJsonRpcProvider } from './url-json-rpc-provider.js';
import { Web3Provider } from './web3-provider.js';
export { Web3Provider } from './web3-provider.js';
import { WebSocketProvider } from './websocket-provider.js';
export { WebSocketProvider } from './websocket-provider.js';
export { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from './formatter.js';
import { Logger } from '../../logger/lib.esm/index.js';
import { version } from './_version.js';

const logger = new Logger(version);
////////////////////////
// Helper Functions
function getDefaultProvider(network, options) {
    if (network == null) {
        network = "homestead";
    }
    // If passed a URL, figure out the right type of provider based on the scheme
    if (typeof (network) === "string") {
        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
        // Handle http and ws (and their secure variants)
        const match = network.match(/^(ws|http)s?:/i);
        if (match) {
            switch (match[1].toLowerCase()) {
                case "http":
                case "https":
                    return new JsonRpcProvider(network);
                case "ws":
                case "wss":
                    return new WebSocketProvider(network);
                default:
                    logger.throwArgumentError("unsupported URL scheme", "network", network);
            }
        }
    }
    const n = getNetwork(network);
    if (!n || !n._defaultProvider) {
        logger.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
            operation: "getDefaultProvider",
            network: network
        });
    }
    return n._defaultProvider({
        FallbackProvider,
        AlchemyProvider,
        AnkrProvider,
        CloudflareProvider,
        EtherscanProvider,
        InfuraProvider,
        JsonRpcProvider,
        NodesmithProvider,
        PocketProvider,
        Web3Provider,
        IpcProvider,
    }, options);
}

export { getDefaultProvider };
//# sourceMappingURL=index.js.map

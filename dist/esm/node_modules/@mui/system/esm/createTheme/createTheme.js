import _extends from '../../../../@babel/runtime/helpers/esm/extends.js';
import _objectWithoutPropertiesLoose from '../../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';
import deepmerge from '../../../utils/esm/deepmerge.js';
import '../../../utils/esm/elementAcceptingRef.js';
import '../../../utils/esm/elementTypeAcceptingRef.js';
import 'react-is';
import '../../../utils/esm/ponyfillGlobal.js';
import '../../../utils/esm/refType.js';
import 'react';
import '../../../utils/esm/integerPropType.js';
import createBreakpoints from './createBreakpoints.js';
import shape from './shape.js';
import createSpacing from './createSpacing.js';
import styleFunctionSx from '../styleFunctionSx/styleFunctionSx.js';
import defaultSxConfig from '../styleFunctionSx/defaultSxConfig.js';

const _excluded = ["breakpoints", "palette", "spacing", "shape"];
function createTheme(options = {}, ...args) {
  const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options,
    other = _objectWithoutPropertiesLoose(options, _excluded);
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge({
    breakpoints,
    direction: 'ltr',
    components: {},
    // Inject component definitions.
    palette: _extends({
      mode: 'light'
    }, paletteInput),
    spacing,
    shape: _extends({}, shape, shapeInput)
  }, other);
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}

export { createTheme as default };
//# sourceMappingURL=createTheme.js.map

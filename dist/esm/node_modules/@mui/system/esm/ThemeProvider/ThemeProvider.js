import 'react';
import PropTypes from 'prop-types';
import ThemeProvider$1 from '../../../private-theming/ThemeProvider/ThemeProvider.js';
import '../../../private-theming/useTheme/ThemeContext.js';
import '../../../utils/esm/elementAcceptingRef.js';
import '../../../utils/esm/elementTypeAcceptingRef.js';
import exactProp from '../../../utils/esm/exactProp.js';
import 'react-is';
import '../../../utils/esm/ponyfillGlobal.js';
import '../../../utils/esm/refType.js';
import '../../../utils/esm/integerPropType.js';
import '@emotion/styled';
import { ThemeContext } from '@emotion/react';
import '../../../styled-engine/StyledEngineProvider/StyledEngineProvider.js';
import '../../../styled-engine/GlobalStyles/GlobalStyles.js';
import useTheme from '../useTheme.js';
import { jsx } from 'react/jsx-runtime';

const EMPTY_THEME = {};
function InnerThemeProvider(props) {
  const theme = useTheme();
  return /*#__PURE__*/jsx(ThemeContext.Provider, {
    value: typeof theme === 'object' ? theme : EMPTY_THEME,
    children: props.children
  });
}
process.env.NODE_ENV !== "production" ? InnerThemeProvider.propTypes = {
  /**
   * Your component tree.
   */
  children: PropTypes.node
} : void 0;

/**
 * This component makes the `theme` available down the React tree.
 * It should preferably be used at **the root of your component tree**.
 */
function ThemeProvider(props) {
  const {
    children,
    theme: localTheme
  } = props;
  return /*#__PURE__*/jsx(ThemeProvider$1, {
    theme: localTheme,
    children: /*#__PURE__*/jsx(InnerThemeProvider, {
      children: children
    })
  });
}
process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Your component tree.
   */
  children: PropTypes.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired
} : void 0;
if (process.env.NODE_ENV !== 'production') {
  process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
}

export { ThemeProvider as default };
//# sourceMappingURL=ThemeProvider.js.map

{"version":3,"file":"printer.mjs.js","sources":["../../../../../node_modules/graphql/language/printer.mjs"],"sourcesContent":["import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n"],"names":["visit","printBlockString","printString"],"mappings":"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"}
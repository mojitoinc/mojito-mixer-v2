{"version":3,"file":"lexer.mjs.js","sources":["../../../../../node_modules/graphql/language/lexer.mjs"],"sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n"],"names":["Token","TokenKind","isDigit","isNameStart","syntaxError","dedentBlockStringLines","isNameContinue"],"mappings":"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"}
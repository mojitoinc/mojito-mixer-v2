'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var has = require('lodash/has');
var toposort = require('toposort');
var propertyExpr = require('property-expr');
var Reference = require('../Reference.js');
var isSchema = require('./isSchema.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var has__default = /*#__PURE__*/_interopDefaultLegacy(has);
var toposort__default = /*#__PURE__*/_interopDefaultLegacy(toposort);

function sortFields(fields, excludedEdges = []) {
  let edges = [];
  let nodes = new Set();
  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));

  function addNode(depPath, key) {
    let node = propertyExpr.split(depPath)[0];
    nodes.add(node);
    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);
  }

  for (const key in fields) if (has__default["default"](fields, key)) {
    let value = fields[key];
    nodes.add(key);
    if (Reference["default"].isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema["default"](value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));
  }

  return toposort__default["default"].array(Array.from(nodes), edges).reverse();
}

exports["default"] = sortFields;
//# sourceMappingURL=sortFields.js.map

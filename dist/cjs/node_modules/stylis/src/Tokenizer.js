'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Utility = require('./Utility.js');

exports.line = 1;
exports.column = 1;
exports.length = 0;
exports.position = 0;
exports.character = 0;
exports.characters = '';

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: exports.line, column: exports.column, length: length, return: ''}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return Utility.assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
}

/**
 * @return {number}
 */
function char () {
	return exports.character
}

/**
 * @return {number}
 */
function prev () {
	exports.character = exports.position > 0 ? Utility.charat(exports.characters, --exports.position) : 0;

	if (exports.column--, exports.character === 10)
		exports.column = 1, exports.line--;

	return exports.character
}

/**
 * @return {number}
 */
function next () {
	exports.character = exports.position < exports.length ? Utility.charat(exports.characters, exports.position++) : 0;

	if (exports.column++, exports.character === 10)
		exports.column = 1, exports.line++;

	return exports.character
}

/**
 * @return {number}
 */
function peek () {
	return Utility.charat(exports.characters, exports.position)
}

/**
 * @return {number}
 */
function caret () {
	return exports.position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return Utility.substr(exports.characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return exports.line = exports.column = 1, exports.length = Utility.strlen(exports.characters = value), exports.position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return exports.characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return Utility.trim(slice(exports.position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (exports.character = peek())
		if (exports.character < 33)
			next();
		else
			break

	return token(type) > 2 || token(exports.character) > 3 ? '' : ' '
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (exports.character < 48 || exports.character > 102 || (exports.character > 57 && exports.character < 65) || (exports.character > 70 && exports.character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (exports.character) {
			// ] ) " '
			case type:
				return exports.position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(exports.character);
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type);
				break
			// \
			case 92:
				next();
				break
		}

	return exports.position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + exports.character === 47 + 10)
			break
		// /*
		else if (type + exports.character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, exports.position - 1) + '*' + Utility.from(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next();

	return slice(index, exports.position)
}

exports.alloc = alloc;
exports.caret = caret;
exports.char = char;
exports.commenter = commenter;
exports.copy = copy;
exports.dealloc = dealloc;
exports.delimit = delimit;
exports.delimiter = delimiter;
exports.escaping = escaping;
exports.identifier = identifier;
exports.next = next;
exports.node = node;
exports.peek = peek;
exports.prev = prev;
exports.slice = slice;
exports.token = token;
exports.whitespace = whitespace;
//# sourceMappingURL=Tokenizer.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index$5 = require('../../address/lib.esm/index.js');
var index$7 = require('../../abstract-provider/lib.esm/index.js');
var index$1 = require('../../abstract-signer/lib.esm/index.js');
var index$9 = require('../../bytes/lib.esm/index.js');
var index$8 = require('../../keccak256/lib.esm/index.js');
require('../../bignumber/lib.esm/bignumber.js');
require('../../bignumber/lib.esm/fixednumber.js');
require('../../strings/lib.esm/utf8.js');
require('../../strings/lib.esm/idna.js');
require('../../hash/lib.esm/namehash.js');
var message = require('../../hash/lib.esm/message.js');
var typedData = require('../../hash/lib.esm/typed-data.js');
var index$6 = require('../../hdnode/lib.esm/index.js');
var index$3 = require('../../properties/lib.esm/index.js');
var random = require('../../random/lib.esm/random.js');
var index$2 = require('../../signing-key/lib.esm/index.js');
var index$a = require('../../json-wallets/lib.esm/index.js');
var index$4 = require('../../transactions/lib.esm/index.js');
var index = require('../../logger/lib.esm/index.js');
var _version = require('./_version.js');
var keystore = require('../../json-wallets/lib.esm/keystore.js');

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new index.Logger(_version.version);
function isAccount(value) {
    return (value != null && index$9.isHexString(value.privateKey, 32) && value.address != null);
}
function hasMnemonic(value) {
    const mnemonic = value.mnemonic;
    return (mnemonic && mnemonic.phrase);
}
class Wallet extends index$1.Signer {
    constructor(privateKey, provider) {
        super();
        if (isAccount(privateKey)) {
            const signingKey = new index$2.SigningKey(privateKey.privateKey);
            index$3.defineReadOnly(this, "_signingKey", () => signingKey);
            index$3.defineReadOnly(this, "address", index$4.computeAddress(this.publicKey));
            if (this.address !== index$5.getAddress(privateKey.address)) {
                logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
            }
            if (hasMnemonic(privateKey)) {
                const srcMnemonic = privateKey.mnemonic;
                index$3.defineReadOnly(this, "_mnemonic", () => ({
                    phrase: srcMnemonic.phrase,
                    path: srcMnemonic.path || index$6.defaultPath,
                    locale: srcMnemonic.locale || "en"
                }));
                const mnemonic = this.mnemonic;
                const node = index$6.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                if (index$4.computeAddress(node.privateKey) !== this.address) {
                    logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                }
            }
            else {
                index$3.defineReadOnly(this, "_mnemonic", () => null);
            }
        }
        else {
            if (index$2.SigningKey.isSigningKey(privateKey)) {
                /* istanbul ignore if */
                if (privateKey.curve !== "secp256k1") {
                    logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                }
                index$3.defineReadOnly(this, "_signingKey", () => privateKey);
            }
            else {
                // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                if (typeof (privateKey) === "string") {
                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                        privateKey = "0x" + privateKey;
                    }
                }
                const signingKey = new index$2.SigningKey(privateKey);
                index$3.defineReadOnly(this, "_signingKey", () => signingKey);
            }
            index$3.defineReadOnly(this, "_mnemonic", () => null);
            index$3.defineReadOnly(this, "address", index$4.computeAddress(this.publicKey));
        }
        /* istanbul ignore if */
        if (provider && !index$7.Provider.isProvider(provider)) {
            logger.throwArgumentError("invalid provider", "provider", provider);
        }
        index$3.defineReadOnly(this, "provider", provider || null);
    }
    get mnemonic() { return this._mnemonic(); }
    get privateKey() { return this._signingKey().privateKey; }
    get publicKey() { return this._signingKey().publicKey; }
    getAddress() {
        return Promise.resolve(this.address);
    }
    connect(provider) {
        return new Wallet(this, provider);
    }
    signTransaction(transaction) {
        return index$3.resolveProperties(transaction).then((tx) => {
            if (tx.from != null) {
                if (index$5.getAddress(tx.from) !== this.address) {
                    logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                }
                delete tx.from;
            }
            const signature = this._signingKey().signDigest(index$8.keccak256(index$4.serialize(tx)));
            return index$4.serialize(tx, signature);
        });
    }
    signMessage(message$1) {
        return __awaiter(this, void 0, void 0, function* () {
            return index$9.joinSignature(this._signingKey().signDigest(message.hashMessage(message$1)));
        });
    }
    _signTypedData(domain, types, value) {
        return __awaiter(this, void 0, void 0, function* () {
            // Populate any ENS names
            const populated = yield typedData.TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                if (this.provider == null) {
                    logger.throwError("cannot resolve ENS names without a provider", index.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName",
                        value: name
                    });
                }
                return this.provider.resolveName(name);
            });
            return index$9.joinSignature(this._signingKey().signDigest(typedData.TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
    }
    encrypt(password, options, progressCallback) {
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (progressCallback && typeof (progressCallback) !== "function") {
            throw new Error("invalid callback");
        }
        if (!options) {
            options = {};
        }
        return keystore.encrypt(this, password, options, progressCallback);
    }
    /**
     *  Static methods to create Wallet instances.
     */
    static createRandom(options) {
        let entropy = random.randomBytes(16);
        if (!options) {
            options = {};
        }
        if (options.extraEntropy) {
            entropy = index$9.arrayify(index$9.hexDataSlice(index$8.keccak256(index$9.concat([entropy, options.extraEntropy])), 0, 16));
        }
        const mnemonic = index$6.entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
    static fromEncryptedJson(json, password, progressCallback) {
        return index$a.decryptJsonWallet(json, password, progressCallback).then((account) => {
            return new Wallet(account);
        });
    }
    static fromEncryptedJsonSync(json, password) {
        return new Wallet(index$a.decryptJsonWalletSync(json, password));
    }
    static fromMnemonic(mnemonic, path, wordlist) {
        if (!path) {
            path = index$6.defaultPath;
        }
        return new Wallet(index$6.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
    }
}
function verifyMessage(message$1, signature) {
    return index$4.recoverAddress(message.hashMessage(message$1), signature);
}
function verifyTypedData(domain, types, value, signature) {
    return index$4.recoverAddress(typedData.TypedDataEncoder.hash(domain, types, value), signature);
}

exports.Wallet = Wallet;
exports.verifyMessage = verifyMessage;
exports.verifyTypedData = verifyTypedData;
//# sourceMappingURL=index.js.map

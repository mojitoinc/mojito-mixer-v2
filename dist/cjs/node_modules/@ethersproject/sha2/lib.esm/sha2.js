'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hash = require('hash.js');
var index$1 = require('../../bytes/lib.esm/index.js');
var types = require('./types.js');
var index = require('../../logger/lib.esm/index.js');
var _version = require('./_version.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var hash__default = /*#__PURE__*/_interopDefaultLegacy(hash);

const logger = new index.Logger(_version.version);
function ripemd160(data) {
    return "0x" + (hash__default["default"].ripemd160().update(index$1.arrayify(data)).digest("hex"));
}
function sha256(data) {
    return "0x" + (hash__default["default"].sha256().update(index$1.arrayify(data)).digest("hex"));
}
function sha512(data) {
    return "0x" + (hash__default["default"].sha512().update(index$1.arrayify(data)).digest("hex"));
}
function computeHmac(algorithm, key, data) {
    if (!types.SupportedAlgorithm[algorithm]) {
        logger.throwError("unsupported algorithm " + algorithm, index.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "hmac",
            algorithm: algorithm
        });
    }
    return "0x" + hash__default["default"].hmac(hash__default["default"][algorithm], index$1.arrayify(key)).update(index$1.arrayify(data)).digest("hex");
}

exports.computeHmac = computeHmac;
exports.ripemd160 = ripemd160;
exports.sha256 = sha256;
exports.sha512 = sha512;
//# sourceMappingURL=sha2.js.map

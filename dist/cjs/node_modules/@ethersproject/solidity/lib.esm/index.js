'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var bignumber = require('../../bignumber/lib.esm/bignumber.js');
require('../../bignumber/lib.esm/fixednumber.js');
var index$1 = require('../../bytes/lib.esm/index.js');
var index$2 = require('../../keccak256/lib.esm/index.js');
var sha2 = require('../../sha2/lib.esm/sha2.js');
require('../../sha2/lib.esm/types.js');
var utf8 = require('../../strings/lib.esm/utf8.js');
require('../../strings/lib.esm/idna.js');
var index = require('../../logger/lib.esm/index.js');
var _version = require('./_version.js');

const regexBytes = new RegExp("^bytes([0-9]+)$");
const regexNumber = new RegExp("^(u?int)([0-9]*)$");
const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
const logger = new index.Logger(_version.version);
function _pack(type, value, isArray) {
    switch (type) {
        case "address":
            if (isArray) {
                return index$1.zeroPad(value, 32);
            }
            return index$1.arrayify(value);
        case "string":
            return utf8.toUtf8Bytes(value);
        case "bytes":
            return index$1.arrayify(value);
        case "bool":
            value = (value ? "0x01" : "0x00");
            if (isArray) {
                return index$1.zeroPad(value, 32);
            }
            return index$1.arrayify(value);
    }
    let match = type.match(regexNumber);
    if (match) {
        //let signed = (match[1] === "int")
        let size = parseInt(match[2] || "256");
        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
            logger.throwArgumentError("invalid number type", "type", type);
        }
        if (isArray) {
            size = 256;
        }
        value = bignumber.BigNumber.from(value).toTwos(size);
        return index$1.zeroPad(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
        const size = parseInt(match[1]);
        if (String(size) !== match[1] || size === 0 || size > 32) {
            logger.throwArgumentError("invalid bytes type", "type", type);
        }
        if (index$1.arrayify(value).byteLength !== size) {
            logger.throwArgumentError(`invalid value for ${type}`, "value", value);
        }
        if (isArray) {
            return index$1.arrayify((value + Zeros).substring(0, 66));
        }
        return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        if (count != value.length) {
            logger.throwArgumentError(`invalid array length for ${type}`, "value", value);
        }
        const result = [];
        value.forEach(function (value) {
            result.push(_pack(baseType, value, true));
        });
        return index$1.concat(result);
    }
    return logger.throwArgumentError("invalid type", "type", type);
}
// @TODO: Array Enum
function pack(types, values) {
    if (types.length != values.length) {
        logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
    }
    const tight = [];
    types.forEach(function (type, index) {
        tight.push(_pack(type, values[index]));
    });
    return index$1.hexlify(index$1.concat(tight));
}
function keccak256(types, values) {
    return index$2.keccak256(pack(types, values));
}
function sha256(types, values) {
    return sha2.sha256(pack(types, values));
}

exports.keccak256 = keccak256;
exports.pack = pack;
exports.sha256 = sha256;
//# sourceMappingURL=index.js.map

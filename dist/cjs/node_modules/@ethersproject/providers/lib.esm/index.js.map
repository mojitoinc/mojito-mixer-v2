{"version":3,"file":"index.js","sources":["../../../../../../node_modules/@ethersproject/providers/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\":\n                case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, \n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, AnkrProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, \n///////////////////////\n// Objects\nFormatter };\n//# sourceMappingURL=index.js.map"],"names":["Logger","version","JsonRpcProvider","WebSocketProvider","getNetwork","FallbackProvider","AlchemyProvider","AnkrProvider","CloudflareProvider","EtherscanProvider","InfuraProvider","NodesmithProvider","PocketProvider","Web3Provider","IpcProvider"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAM,MAAM,GAAG,IAAIA,cAAM,CAACC,gBAAO,CAAC,CAAC;AACnC;AACA;AACA,SAAS,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE;AAC9C,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;AACzB,QAAQ,OAAO,GAAG,WAAW,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,QAAQ,OAAO,CAAC,KAAK,QAAQ,EAAE;AACvC;AACA;AACA,QAAQ,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AACtD,QAAQ,IAAI,KAAK,EAAE;AACnB,YAAY,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;AAC1C,gBAAgB,KAAK,MAAM,CAAC;AAC5B,gBAAgB,KAAK,OAAO;AAC5B,oBAAoB,OAAO,IAAIC,+BAAe,CAAC,OAAO,CAAC,CAAC;AACxD,gBAAgB,KAAK,IAAI,CAAC;AAC1B,gBAAgB,KAAK,KAAK;AAC1B,oBAAoB,OAAO,IAAIC,mCAAiB,CAAC,OAAO,CAAC,CAAC;AAC1D,gBAAgB;AAChB,oBAAoB,MAAM,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;AAC5F,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,MAAM,CAAC,GAAGC,kBAAU,CAAC,OAAO,CAAC,CAAC;AAClC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE;AACnC,QAAQ,MAAM,CAAC,UAAU,CAAC,wCAAwC,EAAEJ,cAAM,CAAC,MAAM,CAAC,aAAa,EAAE;AACjG,YAAY,SAAS,EAAE,oBAAoB;AAC3C,YAAY,OAAO,EAAE,OAAO;AAC5B,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,OAAO,CAAC,CAAC,gBAAgB,CAAC;AAC9B,0BAAQK,iCAAgB;AACxB,yBAAQC,+BAAe;AACvB,sBAAQC,yBAAY;AACpB,4BAAQC,qCAAkB;AAC1B,2BAAQC,mCAAiB;AACzB,wBAAQC,6BAAc;AACtB,yBAAQR,+BAAe;AACvB,2BAAQS,mCAAiB;AACzB,wBAAQC,6BAAc;AACtB,sBAAQC,yBAAY;AACpB,qBAAQC,uBAAW;AACnB,KAAK,EAAE,OAAO,CAAC,CAAC;AAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
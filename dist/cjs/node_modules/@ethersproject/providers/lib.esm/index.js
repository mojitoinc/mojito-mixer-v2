'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index$1 = require('../../abstract-provider/lib.esm/index.js');
var index$2 = require('../../networks/lib.esm/index.js');
var baseProvider = require('./base-provider.js');
var alchemyProvider = require('./alchemy-provider.js');
var ankrProvider = require('./ankr-provider.js');
var cloudflareProvider = require('./cloudflare-provider.js');
var etherscanProvider = require('./etherscan-provider.js');
var fallbackProvider = require('./fallback-provider.js');
var ipcProvider = require('./ipc-provider.js');
var infuraProvider = require('./infura-provider.js');
var jsonRpcProvider = require('./json-rpc-provider.js');
var jsonRpcBatchProvider = require('./json-rpc-batch-provider.js');
var nodesmithProvider = require('./nodesmith-provider.js');
var pocketProvider = require('./pocket-provider.js');
var urlJsonRpcProvider = require('./url-json-rpc-provider.js');
var web3Provider = require('./web3-provider.js');
var websocketProvider = require('./websocket-provider.js');
var formatter = require('./formatter.js');
var index$3 = require('../../logger/lib.esm/index.js');
var _version = require('./_version.js');

const logger = new index$3.Logger(_version.version);
////////////////////////
// Helper Functions
function getDefaultProvider(network, options) {
    if (network == null) {
        network = "homestead";
    }
    // If passed a URL, figure out the right type of provider based on the scheme
    if (typeof (network) === "string") {
        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
        // Handle http and ws (and their secure variants)
        const match = network.match(/^(ws|http)s?:/i);
        if (match) {
            switch (match[1].toLowerCase()) {
                case "http":
                case "https":
                    return new jsonRpcProvider.JsonRpcProvider(network);
                case "ws":
                case "wss":
                    return new websocketProvider.WebSocketProvider(network);
                default:
                    logger.throwArgumentError("unsupported URL scheme", "network", network);
            }
        }
    }
    const n = index$2.getNetwork(network);
    if (!n || !n._defaultProvider) {
        logger.throwError("unsupported getDefaultProvider network", index$3.Logger.errors.NETWORK_ERROR, {
            operation: "getDefaultProvider",
            network: network
        });
    }
    return n._defaultProvider({
        FallbackProvider: fallbackProvider.FallbackProvider,
        AlchemyProvider: alchemyProvider.AlchemyProvider,
        AnkrProvider: ankrProvider.AnkrProvider,
        CloudflareProvider: cloudflareProvider.CloudflareProvider,
        EtherscanProvider: etherscanProvider.EtherscanProvider,
        InfuraProvider: infuraProvider.InfuraProvider,
        JsonRpcProvider: jsonRpcProvider.JsonRpcProvider,
        NodesmithProvider: nodesmithProvider.NodesmithProvider,
        PocketProvider: pocketProvider.PocketProvider,
        Web3Provider: web3Provider.Web3Provider,
        IpcProvider: ipcProvider.IpcProvider,
    }, options);
}

exports.Provider = index$1.Provider;
exports.getNetwork = index$2.getNetwork;
exports.BaseProvider = baseProvider.BaseProvider;
exports.Resolver = baseProvider.Resolver;
exports.AlchemyProvider = alchemyProvider.AlchemyProvider;
exports.AlchemyWebSocketProvider = alchemyProvider.AlchemyWebSocketProvider;
exports.AnkrProvider = ankrProvider.AnkrProvider;
exports.CloudflareProvider = cloudflareProvider.CloudflareProvider;
exports.EtherscanProvider = etherscanProvider.EtherscanProvider;
exports.FallbackProvider = fallbackProvider.FallbackProvider;
exports.IpcProvider = ipcProvider.IpcProvider;
exports.InfuraProvider = infuraProvider.InfuraProvider;
exports.InfuraWebSocketProvider = infuraProvider.InfuraWebSocketProvider;
exports.JsonRpcProvider = jsonRpcProvider.JsonRpcProvider;
exports.JsonRpcSigner = jsonRpcProvider.JsonRpcSigner;
exports.JsonRpcBatchProvider = jsonRpcBatchProvider.JsonRpcBatchProvider;
exports.NodesmithProvider = nodesmithProvider.NodesmithProvider;
exports.PocketProvider = pocketProvider.PocketProvider;
exports.StaticJsonRpcProvider = urlJsonRpcProvider.StaticJsonRpcProvider;
exports.UrlJsonRpcProvider = urlJsonRpcProvider.UrlJsonRpcProvider;
exports.Web3Provider = web3Provider.Web3Provider;
exports.WebSocketProvider = websocketProvider.WebSocketProvider;
exports.Formatter = formatter.Formatter;
exports.isCommunityResourcable = formatter.isCommunityResourcable;
exports.isCommunityResource = formatter.isCommunityResource;
exports.showThrottleMessage = formatter.showThrottleMessage;
exports.getDefaultProvider = getDefaultProvider;
//# sourceMappingURL=index.js.map

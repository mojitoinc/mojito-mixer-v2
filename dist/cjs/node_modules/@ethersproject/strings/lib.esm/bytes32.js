'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../../bignumber/lib.esm/bignumber.js');
require('../../bignumber/lib.esm/fixednumber.js');
var hashes = require('../../constants/lib.esm/hashes.js');
var index = require('../../bytes/lib.esm/index.js');
var utf8 = require('./utf8.js');

function formatBytes32String(text) {
    // Get the bytes
    const bytes = utf8.toUtf8Bytes(text);
    // Check we have room for null-termination
    if (bytes.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
    }
    // Zero-pad (implicitly null-terminates)
    return index.hexlify(index.concat([bytes, hashes.HashZero]).slice(0, 32));
}
function parseBytes32String(bytes) {
    const data = index.arrayify(bytes);
    // Must be 32 bytes with a null-termination
    if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
    }
    // Find the null termination
    let length = 31;
    while (data[length - 1] === 0) {
        length--;
    }
    // Determine the string value
    return utf8.toUtf8String(data.slice(0, length));
}

exports.formatBytes32String = formatBytes32String;
exports.parseBytes32String = parseBytes32String;
//# sourceMappingURL=bytes32.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aes = require('aes-js');
var index$1 = require('../../address/lib.esm/index.js');
var index$2 = require('../../bytes/lib.esm/index.js');
var index$3 = require('../../keccak256/lib.esm/index.js');
var pbkdf2 = require('../../pbkdf2/lib.esm/pbkdf2.js');
require('../../bignumber/lib.esm/bignumber.js');
require('../../bignumber/lib.esm/fixednumber.js');
var utf8 = require('../../strings/lib.esm/utf8.js');
require('../../strings/lib.esm/idna.js');
var index$4 = require('../../properties/lib.esm/index.js');
var index = require('../../logger/lib.esm/index.js');
var _version = require('./_version.js');
var utils = require('./utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var aes__default = /*#__PURE__*/_interopDefaultLegacy(aes);

const logger = new index.Logger(_version.version);
class CrowdsaleAccount extends index$4.Description {
    isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
    }
}
// See: https://github.com/ethereum/pyethsaletool
function decrypt(json, password) {
    const data = JSON.parse(json);
    password = utils.getPassword(password);
    // Ethereum Address
    const ethaddr = index$1.getAddress(utils.searchPath(data, "ethaddr"));
    // Encrypted Seed
    const encseed = utils.looseArrayify(utils.searchPath(data, "encseed"));
    if (!encseed || (encseed.length % 16) !== 0) {
        logger.throwArgumentError("invalid encseed", "json", json);
    }
    const key = index$2.arrayify(pbkdf2.pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    // Decrypt the seed
    const aesCbc = new aes__default["default"].ModeOfOperation.cbc(key, iv);
    const seed = aes__default["default"].padding.pkcs7.strip(index$2.arrayify(aesCbc.decrypt(encryptedSeed)));
    // This wallet format is weird... Convert the binary encoded hex to a string.
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = utf8.toUtf8Bytes(seedHex);
    const privateKey = index$3.keccak256(seedHexBytes);
    return new CrowdsaleAccount({
        _isCrowdsaleAccount: true,
        address: ethaddr,
        privateKey: privateKey
    });
}

exports.CrowdsaleAccount = CrowdsaleAccount;
exports.decrypt = decrypt;
//# sourceMappingURL=crowdsale.js.map

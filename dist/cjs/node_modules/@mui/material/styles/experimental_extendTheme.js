'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var deepmerge = require('../../utils/esm/deepmerge.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('react');
require('../../utils/esm/integerPropType.js');
require('@emotion/styled');
require('@emotion/react');
require('../../styled-engine/StyledEngineProvider/StyledEngineProvider.js');
require('../../styled-engine/GlobalStyles/GlobalStyles.js');
require('../../system/esm/borders.js');
require('prop-types');
require('../../system/esm/display.js');
require('../../system/esm/flexbox.js');
require('../../system/esm/cssGrid.js');
require('../../system/esm/palette.js');
require('../../system/esm/positions.js');
require('../../system/esm/shadows.js');
require('../../system/esm/sizing.js');
require('../../system/esm/spacing.js');
require('../../system/esm/responsivePropType.js');
require('../../system/esm/typography.js');
var styleFunctionSx = require('../../system/esm/styleFunctionSx/styleFunctionSx.js');
var defaultSxConfig = require('../../system/esm/styleFunctionSx/defaultSxConfig.js');
require('../../system/esm/getThemeValue.js');
require('../../system/esm/Box/Box.js');
require('../../system/esm/useTheme.js');
require('react/jsx-runtime');
require('../../system/esm/createStyled.js');
require('../../system/esm/styled.js');
require('../../private-theming/ThemeProvider/ThemeProvider.js');
require('../../private-theming/useTheme/ThemeContext.js');
var colorManipulator = require('../../system/esm/colorManipulator.js');
require('../../system/esm/ThemeProvider/ThemeProvider.js');
var createGetCssVar$1 = require('../../system/esm/cssVars/createGetCssVar.js');
require('../../system/esm/Container/createContainer.js');
require('../../system/esm/Container/Container.js');
require('../../system/esm/Container/containerClasses.js');
require('../../system/esm/Unstable_Grid/Grid.js');
require('../../system/esm/Unstable_Grid/createGrid.js');
require('../../system/esm/Unstable_Grid/gridClasses.js');
require('../../system/esm/Stack/Stack.js');
require('../../system/esm/Stack/createStack.js');
require('../../system/esm/Stack/stackClasses.js');
var createTheme = require('./createTheme.js');
var getOverlayAlpha = require('./getOverlayAlpha.js');

const _excluded = ["colorSchemes", "cssVarPrefix"],
  _excluded2 = ["palette"];
const defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return undefined;
  }
  const overlay = getOverlayAlpha["default"](index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function assignNode(obj, keys) {
  keys.forEach(k => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  if (!obj[key] && defaultValue) {
    obj[key] = defaultValue;
  }
}
const silent = fn => {
  try {
    return fn();
  } catch (error) {
    // ignore error
  }
  return undefined;
};
const createGetCssVar = (cssVarPrefix = 'mui') => createGetCssVar$1["default"](cssVarPrefix);
function extendTheme(options = {}, ...args) {
  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
  const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = 'mui'
    } = options,
    input = objectWithoutPropertiesLoose["default"](options, _excluded);
  const getCssVar = createGetCssVar(cssVarPrefix);
  const _createThemeWithoutVa = createTheme["default"](_extends["default"]({}, input, colorSchemesInput.light && {
      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
    })),
    {
      palette: lightPalette
    } = _createThemeWithoutVa,
    muiTheme = objectWithoutPropertiesLoose["default"](_createThemeWithoutVa, _excluded2);
  const {
    palette: darkPalette
  } = createTheme["default"]({
    palette: _extends["default"]({
      mode: 'dark'
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
  });
  let theme = _extends["default"]({}, muiTheme, {
    cssVarPrefix,
    getCssVar,
    colorSchemes: _extends["default"]({}, colorSchemesInput, {
      light: _extends["default"]({}, colorSchemesInput.light, {
        palette: lightPalette,
        opacity: _extends["default"]({
          inputPlaceholder: 0.42,
          inputUnderline: 0.42,
          switchTrackDisabled: 0.12,
          switchTrack: 0.38
        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
      }),
      dark: _extends["default"]({}, colorSchemesInput.dark, {
        palette: darkPalette,
        opacity: _extends["default"]({
          inputPlaceholder: 0.5,
          inputUnderline: 0.7,
          switchTrackDisabled: 0.2,
          switchTrack: 0.3
        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
      })
    })
  });
  Object.keys(theme.colorSchemes).forEach(key => {
    const palette = theme.colorSchemes[key].palette;

    // attach black & white channels to common node
    if (key === 'light') {
      setColor(palette.common, 'background', '#fff');
      setColor(palette.common, 'onBackground', '#000');
    } else {
      setColor(palette.common, 'background', '#000');
      setColor(palette.common, 'onBackground', '#fff');
    }

    // assign component variables
    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);
    if (key === 'light') {
      setColor(palette.Alert, 'errorColor', colorManipulator.private_safeDarken(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', colorManipulator.private_safeDarken(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', colorManipulator.private_safeDarken(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', colorManipulator.private_safeDarken(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));
      setColor(palette.Alert, 'errorFilledColor', silent(() => lightPalette.getContrastText(palette.error.main)));
      setColor(palette.Alert, 'infoFilledColor', silent(() => lightPalette.getContrastText(palette.info.main)));
      setColor(palette.Alert, 'successFilledColor', silent(() => lightPalette.getContrastText(palette.success.main)));
      setColor(palette.Alert, 'warningFilledColor', silent(() => lightPalette.getContrastText(palette.warning.main)));
      setColor(palette.Alert, 'errorStandardBg', colorManipulator.private_safeLighten(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', colorManipulator.private_safeLighten(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', colorManipulator.private_safeLighten(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', colorManipulator.private_safeLighten(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));
      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', colorManipulator.private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, 'secondaryBg', colorManipulator.private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, 'errorBg', colorManipulator.private_safeLighten(palette.error.main, 0.62));
      setColor(palette.LinearProgress, 'infoBg', colorManipulator.private_safeLighten(palette.info.main, 0.62));
      setColor(palette.LinearProgress, 'successBg', colorManipulator.private_safeLighten(palette.success.main, 0.62));
      setColor(palette.LinearProgress, 'warningBg', colorManipulator.private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.11)`);
      setColor(palette.Slider, 'primaryTrack', colorManipulator.private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Slider, 'secondaryTrack', colorManipulator.private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Slider, 'errorTrack', colorManipulator.private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Slider, 'infoTrack', colorManipulator.private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Slider, 'successTrack', colorManipulator.private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Slider, 'warningTrack', colorManipulator.private_safeLighten(palette.warning.main, 0.62));
      const snackbarContentBackground = colorManipulator.private_safeEmphasize(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', silent(() => lightPalette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, 'fabHoverBg', colorManipulator.private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));
      setColor(palette.Switch, 'primaryDisabledColor', colorManipulator.private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Switch, 'secondaryDisabledColor', colorManipulator.private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Switch, 'errorDisabledColor', colorManipulator.private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Switch, 'infoDisabledColor', colorManipulator.private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Switch, 'successDisabledColor', colorManipulator.private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Switch, 'warningDisabledColor', colorManipulator.private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.TableCell, 'border', colorManipulator.private_safeLighten(colorManipulator.private_safeAlpha(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, 'bg', colorManipulator.private_safeAlpha(palette.grey[700], 0.92));
    } else {
      setColor(palette.Alert, 'errorColor', colorManipulator.private_safeLighten(palette.error.light, 0.6));
      setColor(palette.Alert, 'infoColor', colorManipulator.private_safeLighten(palette.info.light, 0.6));
      setColor(palette.Alert, 'successColor', colorManipulator.private_safeLighten(palette.success.light, 0.6));
      setColor(palette.Alert, 'warningColor', colorManipulator.private_safeLighten(palette.warning.light, 0.6));
      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));
      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));
      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));
      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));
      setColor(palette.Alert, 'errorFilledColor', silent(() => darkPalette.getContrastText(palette.error.dark)));
      setColor(palette.Alert, 'infoFilledColor', silent(() => darkPalette.getContrastText(palette.info.dark)));
      setColor(palette.Alert, 'successFilledColor', silent(() => darkPalette.getContrastText(palette.success.dark)));
      setColor(palette.Alert, 'warningFilledColor', silent(() => darkPalette.getContrastText(palette.warning.dark)));
      setColor(palette.Alert, 'errorStandardBg', colorManipulator.private_safeDarken(palette.error.light, 0.9));
      setColor(palette.Alert, 'infoStandardBg', colorManipulator.private_safeDarken(palette.info.light, 0.9));
      setColor(palette.Alert, 'successStandardBg', colorManipulator.private_safeDarken(palette.success.light, 0.9));
      setColor(palette.Alert, 'warningStandardBg', colorManipulator.private_safeDarken(palette.warning.light, 0.9));
      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));
      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode
      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode
      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));
      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));
      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));
      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));
      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
      setColor(palette.LinearProgress, 'primaryBg', colorManipulator.private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, 'secondaryBg', colorManipulator.private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, 'errorBg', colorManipulator.private_safeDarken(palette.error.main, 0.5));
      setColor(palette.LinearProgress, 'infoBg', colorManipulator.private_safeDarken(palette.info.main, 0.5));
      setColor(palette.LinearProgress, 'successBg', colorManipulator.private_safeDarken(palette.success.main, 0.5));
      setColor(palette.LinearProgress, 'warningBg', colorManipulator.private_safeDarken(palette.warning.main, 0.5));
      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.13)`);
      setColor(palette.Slider, 'primaryTrack', colorManipulator.private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.Slider, 'secondaryTrack', colorManipulator.private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.Slider, 'errorTrack', colorManipulator.private_safeDarken(palette.error.main, 0.5));
      setColor(palette.Slider, 'infoTrack', colorManipulator.private_safeDarken(palette.info.main, 0.5));
      setColor(palette.Slider, 'successTrack', colorManipulator.private_safeDarken(palette.success.main, 0.5));
      setColor(palette.Slider, 'warningTrack', colorManipulator.private_safeDarken(palette.warning.main, 0.5));
      const snackbarContentBackground = colorManipulator.private_safeEmphasize(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
      setColor(palette.SnackbarContent, 'color', silent(() => darkPalette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, 'fabHoverBg', colorManipulator.private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));
      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));
      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));
      setColor(palette.Switch, 'primaryDisabledColor', colorManipulator.private_safeDarken(palette.primary.main, 0.55));
      setColor(palette.Switch, 'secondaryDisabledColor', colorManipulator.private_safeDarken(palette.secondary.main, 0.55));
      setColor(palette.Switch, 'errorDisabledColor', colorManipulator.private_safeDarken(palette.error.main, 0.55));
      setColor(palette.Switch, 'infoDisabledColor', colorManipulator.private_safeDarken(palette.info.main, 0.55));
      setColor(palette.Switch, 'successDisabledColor', colorManipulator.private_safeDarken(palette.success.main, 0.55));
      setColor(palette.Switch, 'warningDisabledColor', colorManipulator.private_safeDarken(palette.warning.main, 0.55));
      setColor(palette.TableCell, 'border', colorManipulator.private_safeDarken(colorManipulator.private_safeAlpha(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, 'bg', colorManipulator.private_safeAlpha(palette.grey[700], 0.92));
    }
    setColor(palette.background, 'defaultChannel', colorManipulator.private_safeColorChannel(palette.background.default, 'MUI: The value of `palette.background.default` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().')); // MUI X - DataGrid needs this token.

    setColor(palette.common, 'backgroundChannel', colorManipulator.private_safeColorChannel(palette.common.background, 'MUI: The value of `palette.common.background` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
    setColor(palette.common, 'onBackgroundChannel', colorManipulator.private_safeColorChannel(palette.common.onBackground, 'MUI: The value of `palette.common.onBackground` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
    setColor(palette, 'dividerChannel', colorManipulator.private_safeColorChannel(palette.divider, 'MUI: The value of `palette.divider` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
    Object.keys(palette).forEach(color => {
      const colors = palette[color];

      // The default palettes (primary, secondary, error, info, success, and warning) errors are handled by the above `createTheme(...)`.

      if (colors && typeof colors === 'object') {
        // Silent the error for custom palettes.
        if (colors.main) {
          setColor(palette[color], 'mainChannel', colorManipulator.private_safeColorChannel(colors.main));
        }
        if (colors.light) {
          setColor(palette[color], 'lightChannel', colorManipulator.private_safeColorChannel(colors.light));
        }
        if (colors.dark) {
          setColor(palette[color], 'darkChannel', colorManipulator.private_safeColorChannel(colors.dark));
        }
        if (colors.contrastText) {
          setColor(palette[color], 'contrastTextChannel', colorManipulator.private_safeColorChannel(colors.contrastText));
        }
        if (color === 'text') {
          // Text colors: text.primary, text.secondary
          setColor(palette[color], 'primaryChannel', colorManipulator.private_safeColorChannel(colors.primary, 'MUI: The value of `palette.text.primary` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
          setColor(palette[color], 'secondaryChannel', colorManipulator.private_safeColorChannel(colors.secondary, 'MUI: The value of `palette.text.secondary` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
        }
        if (color === 'action') {
          // Action colors: action.active, action.selected
          if (colors.active) {
            setColor(palette[color], 'activeChannel', colorManipulator.private_safeColorChannel(colors.active, 'MUI: The value of `palette.action.active` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
          }
          if (colors.selected) {
            setColor(palette[color], 'selectedChannel', colorManipulator.private_safeColorChannel(colors.selected, 'MUI: The value of `palette.action.selected` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
          }
        }
      }
    });
  });
  theme = args.reduce((acc, argument) => deepmerge["default"](acc, argument), theme);
  theme.unstable_sxConfig = _extends["default"]({}, defaultSxConfig["default"], input == null ? void 0 : input.unstable_sxConfig);
  theme.unstable_sx = function sx(props) {
    return styleFunctionSx["default"]({
      sx: props,
      theme: this
    });
  };
  return theme;
}

exports.createGetCssVar = createGetCssVar;
exports["default"] = extendTheme;
//# sourceMappingURL=experimental_extendTheme.js.map

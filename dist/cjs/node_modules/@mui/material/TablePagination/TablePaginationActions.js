'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var KeyboardArrowLeft = require('../internal/svg-icons/KeyboardArrowLeft.js');
var KeyboardArrowRight = require('../internal/svg-icons/KeyboardArrowRight.js');
var useTheme = require('../styles/useTheme.js');
var IconButton = require('../IconButton/IconButton.js');
require('../IconButton/iconButtonClasses.js');
var LastPage = require('../internal/svg-icons/LastPage.js');
var FirstPage = require('../internal/svg-icons/FirstPage.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

var _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight, _KeyboardArrowLeft, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;
const _excluded = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
const TablePaginationActions = /*#__PURE__*/React__namespace.forwardRef(function TablePaginationActions(props, ref) {
  const {
      backIconButtonProps,
      count,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props,
    other = objectWithoutPropertiesLoose["default"](props, _excluded);
  const theme = useTheme["default"]();
  const handleFirstPageButtonClick = event => {
    onPageChange(event, 0);
  };
  const handleBackButtonClick = event => {
    onPageChange(event, page - 1);
  };
  const handleNextButtonClick = event => {
    onPageChange(event, page + 1);
  };
  const handleLastPageButtonClick = event => {
    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
  };
  return /*#__PURE__*/jsxRuntime.jsxs("div", _extends["default"]({
    ref: ref
  }, other, {
    children: [showFirstButton && /*#__PURE__*/jsxRuntime.jsx(IconButton["default"], {
      onClick: handleFirstPageButtonClick,
      disabled: page === 0,
      "aria-label": getItemAriaLabel('first', page),
      title: getItemAriaLabel('first', page),
      children: theme.direction === 'rtl' ? _LastPageIcon || (_LastPageIcon = /*#__PURE__*/jsxRuntime.jsx(LastPage["default"], {})) : _FirstPageIcon || (_FirstPageIcon = /*#__PURE__*/jsxRuntime.jsx(FirstPage["default"], {}))
    }), /*#__PURE__*/jsxRuntime.jsx(IconButton["default"], _extends["default"]({
      onClick: handleBackButtonClick,
      disabled: page === 0,
      color: "inherit",
      "aria-label": getItemAriaLabel('previous', page),
      title: getItemAriaLabel('previous', page)
    }, backIconButtonProps, {
      children: theme.direction === 'rtl' ? _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/jsxRuntime.jsx(KeyboardArrowRight["default"], {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/jsxRuntime.jsx(KeyboardArrowLeft["default"], {}))
    })), /*#__PURE__*/jsxRuntime.jsx(IconButton["default"], _extends["default"]({
      onClick: handleNextButtonClick,
      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
      color: "inherit",
      "aria-label": getItemAriaLabel('next', page),
      title: getItemAriaLabel('next', page)
    }, nextIconButtonProps, {
      children: theme.direction === 'rtl' ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /*#__PURE__*/jsxRuntime.jsx(KeyboardArrowLeft["default"], {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /*#__PURE__*/jsxRuntime.jsx(KeyboardArrowRight["default"], {}))
    })), showLastButton && /*#__PURE__*/jsxRuntime.jsx(IconButton["default"], {
      onClick: handleLastPageButtonClick,
      disabled: page >= Math.ceil(count / rowsPerPage) - 1,
      "aria-label": getItemAriaLabel('last', page),
      title: getItemAriaLabel('last', page),
      children: theme.direction === 'rtl' ? _FirstPageIcon2 || (_FirstPageIcon2 = /*#__PURE__*/jsxRuntime.jsx(FirstPage["default"], {})) : _LastPageIcon2 || (_LastPageIcon2 = /*#__PURE__*/jsxRuntime.jsx(LastPage["default"], {}))
    })]
  }));
});
process.env.NODE_ENV !== "production" ? TablePaginationActions.propTypes = {
  /**
   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  backIconButtonProps: PropTypes__default["default"].object,
  /**
   * The total number of rows.
   */
  count: PropTypes__default["default"].number.isRequired,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @returns {string}
   */
  getItemAriaLabel: PropTypes__default["default"].func.isRequired,
  /**
   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  nextIconButtonProps: PropTypes__default["default"].object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: PropTypes__default["default"].func.isRequired,
  /**
   * The zero-based index of the current page.
   */
  page: PropTypes__default["default"].number.isRequired,
  /**
   * The number of rows per page.
   */
  rowsPerPage: PropTypes__default["default"].number.isRequired,
  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: PropTypes__default["default"].bool.isRequired,
  /**
   * If `true`, show the last-page button.
   */
  showLastButton: PropTypes__default["default"].bool.isRequired
} : void 0;

exports["default"] = TablePaginationActions;
//# sourceMappingURL=TablePaginationActions.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
require('react');
var PropTypes = require('prop-types');
var RadioButtonUnchecked = require('../internal/svg-icons/RadioButtonUnchecked.js');
var RadioButtonChecked = require('../internal/svg-icons/RadioButtonChecked.js');
var styled = require('../styles/styled.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const RadioButtonIconRoot = styled["default"]('span')({
  position: 'relative',
  display: 'flex'
});
const RadioButtonIconBackground = styled["default"](RadioButtonUnchecked["default"])({
  // Scale applied to prevent dot misalignment in Safari
  transform: 'scale(1)'
});
const RadioButtonIconDot = styled["default"](RadioButtonChecked["default"])(({
  theme,
  ownerState
}) => _extends["default"]({
  left: 0,
  position: 'absolute',
  transform: 'scale(0)',
  transition: theme.transitions.create('transform', {
    easing: theme.transitions.easing.easeIn,
    duration: theme.transitions.duration.shortest
  })
}, ownerState.checked && {
  transform: 'scale(1)',
  transition: theme.transitions.create('transform', {
    easing: theme.transitions.easing.easeOut,
    duration: theme.transitions.duration.shortest
  })
}));

/**
 * @ignore - internal component.
 */
function RadioButtonIcon(props) {
  const {
    checked = false,
    classes = {},
    fontSize
  } = props;
  const ownerState = _extends["default"]({}, props, {
    checked
  });
  return /*#__PURE__*/jsxRuntime.jsxs(RadioButtonIconRoot, {
    className: classes.root,
    ownerState: ownerState,
    children: [/*#__PURE__*/jsxRuntime.jsx(RadioButtonIconBackground, {
      fontSize: fontSize,
      className: classes.background,
      ownerState: ownerState
    }), /*#__PURE__*/jsxRuntime.jsx(RadioButtonIconDot, {
      fontSize: fontSize,
      className: classes.dot,
      ownerState: ownerState
    })]
  });
}
process.env.NODE_ENV !== "production" ? RadioButtonIcon.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: PropTypes__default["default"].bool,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: PropTypes__default["default"].object,
  /**
   * The size of the component.
   * `small` is equivalent to the dense radio styling.
   */
  fontSize: PropTypes__default["default"].oneOf(['small', 'medium'])
} : void 0;

exports["default"] = RadioButtonIcon;
//# sourceMappingURL=RadioButtonIcon.js.map

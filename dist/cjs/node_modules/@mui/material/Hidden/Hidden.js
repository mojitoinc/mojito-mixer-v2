'use strict';

require('react');
var PropTypes = require('prop-types');
require('./HiddenJs.js');
require('./HiddenCss.js');
require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

process.env.NODE_ENV !== "production" ? {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   * @default 'js'
   */
  implementation: PropTypes__default["default"].oneOf(['css', 'js']),
  /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use a heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */
  initialWidth: PropTypes__default["default"].oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /**
   * If `true`, screens this size and down are hidden.
   * @default false
   */
  lgDown: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and up are hidden.
   * @default false
   */
  lgUp: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and down are hidden.
   * @default false
   */
  mdDown: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and up are hidden.
   * @default false
   */
  mdUp: PropTypes__default["default"].bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired)]),
  /**
   * If `true`, screens this size and down are hidden.
   * @default false
   */
  smDown: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and up are hidden.
   * @default false
   */
  smUp: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and down are hidden.
   * @default false
   */
  xlDown: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and up are hidden.
   * @default false
   */
  xlUp: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and down are hidden.
   * @default false
   */
  xsDown: PropTypes__default["default"].bool,
  /**
   * If `true`, screens this size and up are hidden.
   * @default false
   */
  xsUp: PropTypes__default["default"].bool
} : void 0;
//# sourceMappingURL=Hidden.js.map

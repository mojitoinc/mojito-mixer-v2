'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
var sliderClasses = require('./sliderClasses.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const useValueLabelClasses = props => {
  const {
    open
  } = props;
  const utilityClasses = {
    offset: clsx_m.clsx(open && sliderClasses["default"].valueLabelOpen),
    circle: sliderClasses["default"].valueLabelCircle,
    label: sliderClasses["default"].valueLabelLabel
  };
  return utilityClasses;
};

/**
 * @ignore - internal component.
 */
function SliderValueLabel(props) {
  const {
    children,
    className,
    value
  } = props;
  const classes = useValueLabelClasses(props);
  if (!children) {
    return null;
  }
  return /*#__PURE__*/React__namespace.cloneElement(children, {
    className: clsx_m.clsx(children.props.className)
  }, /*#__PURE__*/jsxRuntime.jsxs(React__namespace.Fragment, {
    children: [children.props.children, /*#__PURE__*/jsxRuntime.jsx("span", {
      className: clsx_m.clsx(classes.offset, className),
      "aria-hidden": true,
      children: /*#__PURE__*/jsxRuntime.jsx("span", {
        className: classes.circle,
        children: /*#__PURE__*/jsxRuntime.jsx("span", {
          className: classes.label,
          children: value
        })
      })
    })]
  }));
}
process.env.NODE_ENV !== "production" ? SliderValueLabel.propTypes = {
  children: PropTypes__default["default"].element.isRequired,
  className: PropTypes__default["default"].string,
  value: PropTypes__default["default"].node
} : void 0;

exports["default"] = SliderValueLabel;
//# sourceMappingURL=SliderValueLabel.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
var capitalize = require('../../utils/esm/capitalize.js');
require('../../utils/esm/integerPropType.js');
var composeClasses = require('../../utils/esm/composeClasses/composeClasses.js');
require('../../base/BadgeUnstyled/BadgeUnstyled.js');
require('../../base/BadgeUnstyled/badgeUnstyledClasses.js');
require('../../base/ButtonUnstyled/ButtonUnstyled.js');
require('../../base/ButtonUnstyled/buttonUnstyledClasses.js');
require('../../base/ClickAwayListener/ClickAwayListener.js');
require('../../base/FocusTrap/FocusTrap.js');
require('../../base/FormControlUnstyled/FormControlUnstyled.js');
require('../../base/FormControlUnstyled/FormControlUnstyledContext.js');
require('../../base/FormControlUnstyled/formControlUnstyledClasses.js');
require('../../base/InputUnstyled/InputUnstyled.js');
require('../../base/InputUnstyled/inputUnstyledClasses.js');
require('../../base/ListboxUnstyled/useListbox.types.js');
require('../../base/MenuUnstyled/MenuUnstyled.js');
require('../../base/MenuUnstyled/MenuUnstyledContext.js');
require('../../base/MenuUnstyled/menuUnstyledClasses.js');
require('../../base/MenuItemUnstyled/MenuItemUnstyled.js');
require('../../base/MenuItemUnstyled/menuItemUnstyledClasses.js');
require('../../base/ModalUnstyled/ModalUnstyled.js');
require('../../base/ModalUnstyled/modalUnstyledClasses.js');
require('../../base/MultiSelectUnstyled/MultiSelectUnstyled.js');
require('../../base/NoSsr/NoSsr.js');
require('../../base/OptionGroupUnstyled/OptionGroupUnstyled.js');
require('../../base/OptionGroupUnstyled/optionGroupUnstyledClasses.js');
require('../../base/OptionUnstyled/OptionUnstyled.js');
require('../../base/OptionUnstyled/optionUnstyledClasses.js');
require('../../base/PopperUnstyled/PopperUnstyled.js');
require('../../base/PopperUnstyled/popperUnstyledClasses.js');
require('../../base/Portal/Portal.js');
require('../../base/SelectUnstyled/SelectUnstyled.js');
require('../../base/SelectUnstyled/selectUnstyledClasses.js');
require('../../base/SliderUnstyled/SliderUnstyled.js');
require('../../base/SliderUnstyled/sliderUnstyledClasses.js');
require('../../base/SnackbarUnstyled/SnackbarUnstyled.js');
require('../../base/SnackbarUnstyled/snackbarUnstyledClasses.js');
require('../../base/SwitchUnstyled/SwitchUnstyled.js');
require('../../base/SwitchUnstyled/switchUnstyledClasses.js');
require('../../base/TablePaginationUnstyled/TablePaginationUnstyled.js');
var jsxRuntime = require('react/jsx-runtime');
require('../../base/TablePaginationUnstyled/tablePaginationUnstyledClasses.js');
require('../../base/TabPanelUnstyled/TabPanelUnstyled.js');
require('../../base/TabPanelUnstyled/tabPanelUnstyledClasses.js');
require('../../base/TabsUnstyled/TabsUnstyled.js');
require('../../base/TabsUnstyled/TabsContext.js');
require('../../base/TabsUnstyled/tabsUnstyledClasses.js');
require('../../base/TabsListUnstyled/TabsListUnstyled.js');
require('../../base/TabsListUnstyled/tabsListUnstyledClasses.js');
require('../../base/TabUnstyled/TabUnstyled.js');
require('../../base/TabUnstyled/tabUnstyledClasses.js');
require('../../base/TextareaAutosize/TextareaAutosize.js');
require('@emotion/styled');
require('@emotion/react');
require('../../styled-engine/StyledEngineProvider/StyledEngineProvider.js');
require('../../styled-engine/GlobalStyles/GlobalStyles.js');
require('../../system/esm/borders.js');
require('../../system/esm/display.js');
require('../../system/esm/flexbox.js');
require('../../system/esm/cssGrid.js');
require('../../system/esm/palette.js');
require('../../system/esm/positions.js');
require('../../system/esm/shadows.js');
require('../../system/esm/sizing.js');
require('../../system/esm/spacing.js');
require('../../system/esm/responsivePropType.js');
require('../../system/esm/typography.js');
require('../../system/esm/styleFunctionSx/styleFunctionSx.js');
require('../../system/esm/getThemeValue.js');
require('../../system/esm/Box/Box.js');
require('../../system/esm/useTheme.js');
require('../../system/esm/createStyled.js');
require('../../system/esm/styled.js');
require('../../private-theming/ThemeProvider/ThemeProvider.js');
require('../../private-theming/useTheme/ThemeContext.js');
var colorManipulator = require('../../system/esm/colorManipulator.js');
require('../../system/esm/ThemeProvider/ThemeProvider.js');
require('../../system/esm/Container/createContainer.js');
require('../../system/esm/Container/Container.js');
require('../../system/esm/Container/containerClasses.js');
require('../../system/esm/Unstable_Grid/Grid.js');
require('../../system/esm/Unstable_Grid/createGrid.js');
require('../../system/esm/Unstable_Grid/gridClasses.js');
require('../../system/esm/Stack/Stack.js');
require('../../system/esm/Stack/createStack.js');
require('../../system/esm/Stack/stackClasses.js');
var styled = require('../styles/styled.js');
var useThemeProps = require('../styles/useThemeProps.js');
var Paper = require('../Paper/Paper.js');
require('../Paper/paperClasses.js');
var alertClasses = require('./alertClasses.js');
var IconButton = require('../IconButton/IconButton.js');
require('../IconButton/iconButtonClasses.js');
var SuccessOutlined = require('../internal/svg-icons/SuccessOutlined.js');
var ReportProblemOutlined = require('../internal/svg-icons/ReportProblemOutlined.js');
var ErrorOutline = require('../internal/svg-icons/ErrorOutline.js');
var InfoOutlined = require('../internal/svg-icons/InfoOutlined.js');
var Close = require('../internal/svg-icons/Close.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
const useUtilityClasses = ownerState => {
  const {
    variant,
    color,
    severity,
    classes
  } = ownerState;
  const slots = {
    root: ['root', `${variant}${capitalize["default"](color || severity)}`, `${variant}`],
    icon: ['icon'],
    message: ['message'],
    action: ['action']
  };
  return composeClasses["default"](slots, alertClasses.getAlertUtilityClass, classes);
};
const AlertRoot = styled["default"](Paper["default"], {
  name: 'MuiAlert',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize["default"](ownerState.color || ownerState.severity)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const getColor = theme.palette.mode === 'light' ? colorManipulator.darken : colorManipulator.lighten;
  const getBackgroundColor = theme.palette.mode === 'light' ? colorManipulator.lighten : colorManipulator.darken;
  const color = ownerState.color || ownerState.severity;
  return _extends["default"]({}, theme.typography.body2, {
    backgroundColor: 'transparent',
    display: 'flex',
    padding: '6px 16px'
  }, color && ownerState.variant === 'standard' && {
    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
    backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),
    [`& .${alertClasses["default"].icon}`]: theme.vars ? {
      color: theme.vars.palette.Alert[`${color}IconColor`]
    } : {
      color: theme.palette[color].main
    }
  }, color && ownerState.variant === 'outlined' && {
    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
    border: `1px solid ${(theme.vars || theme).palette[color].light}`,
    [`& .${alertClasses["default"].icon}`]: theme.vars ? {
      color: theme.vars.palette.Alert[`${color}IconColor`]
    } : {
      color: theme.palette[color].main
    }
  }, color && ownerState.variant === 'filled' && _extends["default"]({
    fontWeight: theme.typography.fontWeightMedium
  }, theme.vars ? {
    color: theme.vars.palette.Alert[`${color}FilledColor`],
    backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]
  } : {
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,
    color: theme.palette.getContrastText(theme.palette[color].main)
  }));
});
const AlertIcon = styled["default"]('div', {
  name: 'MuiAlert',
  slot: 'Icon',
  overridesResolver: (props, styles) => styles.icon
})({
  marginRight: 12,
  padding: '7px 0',
  display: 'flex',
  fontSize: 22,
  opacity: 0.9
});
const AlertMessage = styled["default"]('div', {
  name: 'MuiAlert',
  slot: 'Message',
  overridesResolver: (props, styles) => styles.message
})({
  padding: '8px 0',
  minWidth: 0,
  overflow: 'auto'
});
const AlertAction = styled["default"]('div', {
  name: 'MuiAlert',
  slot: 'Action',
  overridesResolver: (props, styles) => styles.action
})({
  display: 'flex',
  alignItems: 'flex-start',
  padding: '4px 0 0 16px',
  marginLeft: 'auto',
  marginRight: -8
});
const defaultIconMapping = {
  success: /*#__PURE__*/jsxRuntime.jsx(SuccessOutlined["default"], {
    fontSize: "inherit"
  }),
  warning: /*#__PURE__*/jsxRuntime.jsx(ReportProblemOutlined["default"], {
    fontSize: "inherit"
  }),
  error: /*#__PURE__*/jsxRuntime.jsx(ErrorOutline["default"], {
    fontSize: "inherit"
  }),
  info: /*#__PURE__*/jsxRuntime.jsx(InfoOutlined["default"], {
    fontSize: "inherit"
  })
};
const Alert = /*#__PURE__*/React__namespace.forwardRef(function Alert(inProps, ref) {
  var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;
  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiAlert'
  });
  const {
      action,
      children,
      className,
      closeText = 'Close',
      color,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = 'alert',
      severity = 'success',
      slotProps = {},
      slots = {},
      variant = 'standard'
    } = props,
    other = objectWithoutPropertiesLoose["default"](props, _excluded);
  const ownerState = _extends["default"]({}, props, {
    color,
    severity,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton["default"];
  const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : Close["default"];
  const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;
  const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;
  return /*#__PURE__*/jsxRuntime.jsxs(AlertRoot, _extends["default"]({
    role: role,
    elevation: 0,
    ownerState: ownerState,
    className: clsx_m.clsx(classes.root, className),
    ref: ref
  }, other, {
    children: [icon !== false ? /*#__PURE__*/jsxRuntime.jsx(AlertIcon, {
      ownerState: ownerState,
      className: classes.icon,
      children: icon || iconMapping[severity] || defaultIconMapping[severity]
    }) : null, /*#__PURE__*/jsxRuntime.jsx(AlertMessage, {
      ownerState: ownerState,
      className: classes.message,
      children: children
    }), action != null ? /*#__PURE__*/jsxRuntime.jsx(AlertAction, {
      ownerState: ownerState,
      className: classes.action,
      children: action
    }) : null, action == null && onClose ? /*#__PURE__*/jsxRuntime.jsx(AlertAction, {
      ownerState: ownerState,
      className: classes.action,
      children: /*#__PURE__*/jsxRuntime.jsx(AlertCloseButton, _extends["default"]({
        size: "small",
        "aria-label": closeText,
        title: closeText,
        color: "inherit",
        onClick: onClose
      }, closeButtonProps, {
        children: /*#__PURE__*/jsxRuntime.jsx(AlertCloseIcon, _extends["default"]({
          fontSize: "small"
        }, closeIconProps))
      }))
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" ? Alert.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The action to display. It renders after the message, at the end of the alert.
   */
  action: PropTypes__default["default"].node,
  /**
   * The content of the component.
   */
  children: PropTypes__default["default"].node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes__default["default"].object,
  /**
   * @ignore
   */
  className: PropTypes__default["default"].string,
  /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: PropTypes__default["default"].string,
  /**
   * The color of the component. Unless provided, the value is taken from the `severity` prop.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   */
  color: PropTypes__default["default"] /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes__default["default"].oneOf(['error', 'info', 'success', 'warning']), PropTypes__default["default"].string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: PropTypes__default["default"].shape({
    CloseButton: PropTypes__default["default"].elementType,
    CloseIcon: PropTypes__default["default"].elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: PropTypes__default["default"].shape({
    closeButton: PropTypes__default["default"].object,
    closeIcon: PropTypes__default["default"].object
  }),
  /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   * Set to `false` to remove the `icon`.
   */
  icon: PropTypes__default["default"].node,
  /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */
  iconMapping: PropTypes__default["default"].shape({
    error: PropTypes__default["default"].node,
    info: PropTypes__default["default"].node,
    success: PropTypes__default["default"].node,
    warning: PropTypes__default["default"].node
  }),
  /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: PropTypes__default["default"].func,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: PropTypes__default["default"].string,
  /**
   * The severity of the alert. This defines the color and icon used.
   * @default 'success'
   */
  severity: PropTypes__default["default"].oneOf(['error', 'info', 'success', 'warning']),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: PropTypes__default["default"].shape({
    closeButton: PropTypes__default["default"].object,
    closeIcon: PropTypes__default["default"].object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: PropTypes__default["default"].shape({
    closeButton: PropTypes__default["default"].elementType,
    closeIcon: PropTypes__default["default"].elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object, PropTypes__default["default"].bool])), PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: PropTypes__default["default"] /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes__default["default"].oneOf(['filled', 'outlined', 'standard']), PropTypes__default["default"].string])
} : void 0;

exports["default"] = Alert;
//# sourceMappingURL=Alert.js.map

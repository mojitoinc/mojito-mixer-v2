'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../clsx/dist/clsx.m.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
var refType = require('../../utils/esm/refType.js');
var useId = require('../../utils/esm/useId.js');
require('../../utils/esm/integerPropType.js');
var composeClasses = require('../../utils/esm/composeClasses/composeClasses.js');
require('../../base/BadgeUnstyled/BadgeUnstyled.js');
require('../../base/BadgeUnstyled/badgeUnstyledClasses.js');
require('../../base/ButtonUnstyled/ButtonUnstyled.js');
require('../../base/ButtonUnstyled/buttonUnstyledClasses.js');
require('../../base/ClickAwayListener/ClickAwayListener.js');
require('../../base/FocusTrap/FocusTrap.js');
require('../../base/FormControlUnstyled/FormControlUnstyled.js');
require('../../base/FormControlUnstyled/FormControlUnstyledContext.js');
require('../../base/FormControlUnstyled/formControlUnstyledClasses.js');
require('../../base/InputUnstyled/InputUnstyled.js');
require('../../base/InputUnstyled/inputUnstyledClasses.js');
require('../../base/ListboxUnstyled/useListbox.types.js');
require('../../base/MenuUnstyled/MenuUnstyled.js');
require('../../base/MenuUnstyled/MenuUnstyledContext.js');
require('../../base/MenuUnstyled/menuUnstyledClasses.js');
require('../../base/MenuItemUnstyled/MenuItemUnstyled.js');
require('../../base/MenuItemUnstyled/menuItemUnstyledClasses.js');
require('../../base/ModalUnstyled/ModalUnstyled.js');
require('../../base/ModalUnstyled/modalUnstyledClasses.js');
require('../../base/MultiSelectUnstyled/MultiSelectUnstyled.js');
require('../../base/NoSsr/NoSsr.js');
require('../../base/OptionGroupUnstyled/OptionGroupUnstyled.js');
require('../../base/OptionGroupUnstyled/optionGroupUnstyledClasses.js');
require('../../base/OptionUnstyled/OptionUnstyled.js');
require('../../base/OptionUnstyled/optionUnstyledClasses.js');
require('../../base/PopperUnstyled/PopperUnstyled.js');
require('../../base/PopperUnstyled/popperUnstyledClasses.js');
require('../../base/Portal/Portal.js');
require('../../base/SelectUnstyled/SelectUnstyled.js');
require('../../base/SelectUnstyled/selectUnstyledClasses.js');
require('../../base/SliderUnstyled/SliderUnstyled.js');
require('../../base/SliderUnstyled/SliderValueLabelUnstyled.js');
require('../../base/SliderUnstyled/sliderUnstyledClasses.js');
require('../../base/SnackbarUnstyled/SnackbarUnstyled.js');
require('../../base/SnackbarUnstyled/snackbarUnstyledClasses.js');
require('../../base/SwitchUnstyled/SwitchUnstyled.js');
require('../../base/SwitchUnstyled/switchUnstyledClasses.js');
require('../../base/TablePaginationUnstyled/TablePaginationUnstyled.js');
var jsxRuntime = require('react/jsx-runtime');
require('../../base/TablePaginationUnstyled/tablePaginationUnstyledClasses.js');
require('../../base/TabPanelUnstyled/TabPanelUnstyled.js');
require('../../base/TabPanelUnstyled/tabPanelUnstyledClasses.js');
require('../../base/TabsUnstyled/TabsUnstyled.js');
require('../../base/TabsUnstyled/TabsContext.js');
require('../../base/TabsUnstyled/tabsUnstyledClasses.js');
require('../../base/TabsListUnstyled/TabsListUnstyled.js');
require('../../base/TabsListUnstyled/tabsListUnstyledClasses.js');
require('../../base/TabUnstyled/TabUnstyled.js');
require('../../base/TabUnstyled/tabUnstyledClasses.js');
require('../../base/TextareaAutosize/TextareaAutosize.js');
var styled = require('../styles/styled.js');
var useThemeProps = require('../styles/useThemeProps.js');
var Input = require('../Input/Input.js');
require('../Input/inputClasses.js');
var FilledInput = require('../FilledInput/FilledInput.js');
require('../FilledInput/filledInputClasses.js');
var OutlinedInput = require('../OutlinedInput/OutlinedInput.js');
require('../OutlinedInput/outlinedInputClasses.js');
var InputLabel = require('../InputLabel/InputLabel.js');
require('../InputLabel/inputLabelClasses.js');
var FormControl = require('../FormControl/FormControl.js');
require('../FormControl/FormControlContext.js');
require('../FormControl/formControlClasses.js');
var FormHelperText = require('../FormHelperText/FormHelperText.js');
require('../FormHelperText/formHelperTextClasses.js');
var Select = require('../Select/Select.js');
require('../Select/selectClasses.js');
var textFieldClasses = require('./textFieldClasses.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
const variantComponent = {
  standard: Input["default"],
  filled: FilledInput["default"],
  outlined: OutlinedInput["default"]
};
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['root']
  };
  return composeClasses["default"](slots, textFieldClasses.getTextFieldUtilityClass, classes);
};
const TextFieldRoot = styled["default"](FormControl["default"], {
  name: 'MuiTextField',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({});

/**
 * The `TextField` is a convenience wrapper for the most common cases (80%).
 * It cannot be all things to all people, otherwise the API would grow out of control.
 *
 * ## Advanced Configuration
 *
 * It's important to understand that the text field is a simple abstraction
 * on top of the following components:
 *
 * - [FormControl](/material-ui/api/form-control/)
 * - [InputLabel](/material-ui/api/input-label/)
 * - [FilledInput](/material-ui/api/filled-input/)
 * - [OutlinedInput](/material-ui/api/outlined-input/)
 * - [Input](/material-ui/api/input/)
 * - [FormHelperText](/material-ui/api/form-helper-text/)
 *
 * If you wish to alter the props applied to the `input` element, you can do so as follows:
 *
 * ```jsx
 * const inputProps = {
 *   step: 300,
 * };
 *
 * return <TextField id="time" type="time" inputProps={inputProps} />;
 * ```
 *
 * For advanced cases, please look at the source of TextField by clicking on the
 * "Edit this page" button above. Consider either:
 *
 * - using the upper case props for passing values directly to the components
 * - using the underlying components directly as shown in the demos
 */
const TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(inProps, ref) {
  const props = useThemeProps["default"]({
    props: inProps,
    name: 'MuiTextField'
  });
  const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color = 'primary',
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = 'outlined'
    } = props,
    other = objectWithoutPropertiesLoose["default"](props, _excluded);
  const ownerState = _extends["default"]({}, props, {
    autoFocus,
    color,
    disabled,
    error,
    fullWidth,
    multiline,
    required,
    select,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  if (process.env.NODE_ENV !== 'production') {
    if (select && !children) {
      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
    }
  }
  const InputMore = {};
  if (variant === 'outlined') {
    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
      InputMore.notched = InputLabelProps.shrink;
    }
    InputMore.label = label;
  }
  if (select) {
    // unset defaults from textbox inputs
    if (!SelectProps || !SelectProps.native) {
      InputMore.id = undefined;
    }
    InputMore['aria-describedby'] = undefined;
  }
  const id = useId["default"](idOverride);
  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
  const inputLabelId = label && id ? `${id}-label` : undefined;
  const InputComponent = variantComponent[variant];
  const InputElement = /*#__PURE__*/jsxRuntime.jsx(InputComponent, _extends["default"]({
    "aria-describedby": helperTextId,
    autoComplete: autoComplete,
    autoFocus: autoFocus,
    defaultValue: defaultValue,
    fullWidth: fullWidth,
    multiline: multiline,
    name: name,
    rows: rows,
    maxRows: maxRows,
    minRows: minRows,
    type: type,
    value: value,
    id: id,
    inputRef: inputRef,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    placeholder: placeholder,
    inputProps: inputProps
  }, InputMore, InputProps));
  return /*#__PURE__*/jsxRuntime.jsxs(TextFieldRoot, _extends["default"]({
    className: clsx_m.clsx(classes.root, className),
    disabled: disabled,
    error: error,
    fullWidth: fullWidth,
    ref: ref,
    required: required,
    color: color,
    variant: variant,
    ownerState: ownerState
  }, other, {
    children: [label != null && label !== '' && /*#__PURE__*/jsxRuntime.jsx(InputLabel["default"], _extends["default"]({
      htmlFor: id,
      id: inputLabelId
    }, InputLabelProps, {
      children: label
    })), select ? /*#__PURE__*/jsxRuntime.jsx(Select["default"], _extends["default"]({
      "aria-describedby": helperTextId,
      id: id,
      labelId: inputLabelId,
      value: value,
      input: InputElement
    }, SelectProps, {
      children: children
    })) : InputElement, helperText && /*#__PURE__*/jsxRuntime.jsx(FormHelperText["default"], _extends["default"]({
      id: helperTextId
    }, FormHelperTextProps, {
      children: helperText
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? TextField.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: PropTypes__default["default"].string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: PropTypes__default["default"].bool,
  /**
   * @ignore
   */
  children: PropTypes__default["default"].node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes__default["default"].object,
  /**
   * @ignore
   */
  className: PropTypes__default["default"].string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   * @default 'primary'
   */
  color: PropTypes__default["default"] /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes__default["default"].oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes__default["default"].string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: PropTypes__default["default"].any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: PropTypes__default["default"].bool,
  /**
   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
   */
  FormHelperTextProps: PropTypes__default["default"].object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * The helper text content.
   */
  helperText: PropTypes__default["default"].node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: PropTypes__default["default"].string,
  /**
   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   */
  InputLabelProps: PropTypes__default["default"].object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: PropTypes__default["default"].object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: PropTypes__default["default"].object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType["default"],
  /**
   * The label content.
   */
  label: PropTypes__default["default"].node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: PropTypes__default["default"].oneOf(['dense', 'none', 'normal']),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: PropTypes__default["default"].bool,
  /**
   * Name attribute of the `input` element.
   */
  name: PropTypes__default["default"].string,
  /**
   * @ignore
   */
  onBlur: PropTypes__default["default"].func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: PropTypes__default["default"].func,
  /**
   * @ignore
   */
  onFocus: PropTypes__default["default"].func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: PropTypes__default["default"].string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: PropTypes__default["default"].bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),
  /**
   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: PropTypes__default["default"].bool,
  /**
   * Props applied to the [`Select`](/material-ui/api/select/) element.
   */
  SelectProps: PropTypes__default["default"].object,
  /**
   * The size of the component.
   */
  size: PropTypes__default["default"] /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes__default["default"].oneOf(['medium', 'small']), PropTypes__default["default"].string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object, PropTypes__default["default"].bool])), PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: PropTypes__default["default"] /* @typescript-to-proptypes-ignore */.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: PropTypes__default["default"].any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: PropTypes__default["default"].oneOf(['filled', 'outlined', 'standard'])
} : void 0;

exports["default"] = TextField;
//# sourceMappingURL=TextField.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var objectWithoutPropertiesLoose = require('../../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var _extends = require('../../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../../clsx/dist/clsx.m.js');
var deepmerge = require('../../../utils/esm/deepmerge.js');
require('../../../utils/esm/elementAcceptingRef.js');
require('../../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../../utils/esm/ponyfillGlobal.js');
require('../../../utils/esm/refType.js');
require('../../../utils/esm/integerPropType.js');
var composeClasses = require('../../../utils/esm/composeClasses/composeClasses.js');
var generateUtilityClass = require('../../../utils/esm/generateUtilityClass/generateUtilityClass.js');
var styled = require('../styled.js');
var useThemeProps = require('../useThemeProps/useThemeProps.js');
require('../styleFunctionSx/styleFunctionSx.js');
var extendSxProp = require('../styleFunctionSx/extendSxProp.js');
var spacing = require('../spacing.js');
require('../borders.js');
require('../cssGrid.js');
require('../palette.js');
require('../sizing.js');
var createTheme = require('../createTheme/createTheme.js');
var breakpoints = require('../breakpoints.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["component", "direction", "spacing", "divider", "children", "className"];
const defaultTheme = createTheme["default"]();
// widening Theme to any so that the consumer can own the theme structure.
const defaultCreateStyledComponent = styled["default"]('div', {
  name: 'MuiStack',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
});
function useThemePropsDefault(props) {
  return useThemeProps["default"]({
    props,
    name: 'MuiStack',
    defaultTheme
  });
}

/**
 * Return an array with the separator React element interspersed between
 * each React node of the input children.
 *
 * > joinChildren([1,2,3], 0)
 * [1,0,2,0,3]
 */
function joinChildren(children, separator) {
  const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
  return childrenArray.reduce((output, child, index) => {
    output.push(child);
    if (index < childrenArray.length - 1) {
      output.push( /*#__PURE__*/React__namespace.cloneElement(separator, {
        key: `separator-${index}`
      }));
    }
    return output;
  }, []);
}
const getSideFromDirection = direction => {
  return {
    row: 'Left',
    'row-reverse': 'Right',
    column: 'Top',
    'column-reverse': 'Bottom'
  }[direction];
};
const style = ({
  ownerState,
  theme
}) => {
  let styles = _extends["default"]({
    display: 'flex',
    flexDirection: 'column'
  }, breakpoints.handleBreakpoints({
    theme
  }, breakpoints.resolveBreakpointValues({
    values: ownerState.direction,
    breakpoints: theme.breakpoints.values
  }), propValue => ({
    flexDirection: propValue
  })));
  if (ownerState.spacing) {
    const transformer = spacing.createUnarySpacing(theme);
    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
        acc[breakpoint] = true;
      }
      return acc;
    }, {});
    const directionValues = breakpoints.resolveBreakpointValues({
      values: ownerState.direction,
      base
    });
    const spacingValues = breakpoints.resolveBreakpointValues({
      values: ownerState.spacing,
      base
    });
    if (typeof directionValues === 'object') {
      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
        const directionValue = directionValues[breakpoint];
        if (!directionValue) {
          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';
          directionValues[breakpoint] = previousDirectionValue;
        }
      });
    }
    const styleFromPropValue = (propValue, breakpoint) => {
      return {
        '& > :not(style) + :not(style)': {
          margin: 0,
          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: spacing.getValue(transformer, propValue)
        }
      };
    };
    styles = deepmerge["default"](styles, breakpoints.handleBreakpoints({
      theme
    }, spacingValues, styleFromPropValue));
  }
  styles = breakpoints.mergeBreakpointsInOrder(theme.breakpoints, styles);
  return styles;
};
function createStack(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps = useThemePropsDefault,
    componentName = 'MuiStack'
  } = options;
  const useUtilityClasses = () => {
    const slots = {
      root: ['root']
    };
    return composeClasses["default"](slots, slot => generateUtilityClass["default"](componentName, slot), {});
  };
  const StackRoot = createStyledComponent(style);
  const Stack = /*#__PURE__*/React__namespace.forwardRef(function Grid(inProps, ref) {
    const themeProps = useThemeProps(inProps);
    const props = extendSxProp["default"](themeProps); // `color` type conflicts with html color attribute.
    const {
        component = 'div',
        direction = 'column',
        spacing = 0,
        divider,
        children,
        className
      } = props,
      other = objectWithoutPropertiesLoose["default"](props, _excluded);
    const ownerState = {
      direction,
      spacing
    };
    const classes = useUtilityClasses();
    return /*#__PURE__*/jsxRuntime.jsx(StackRoot, _extends["default"]({
      as: component,
      ownerState: ownerState,
      ref: ref,
      className: clsx_m.clsx(classes.root, className)
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  process.env.NODE_ENV !== "production" ? Stack.propTypes /* remove-proptypes */ = {
    children: PropTypes__default["default"].node,
    direction: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes__default["default"].object]),
    divider: PropTypes__default["default"].node,
    spacing: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string])), PropTypes__default["default"].number, PropTypes__default["default"].object, PropTypes__default["default"].string]),
    sx: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object, PropTypes__default["default"].bool])), PropTypes__default["default"].func, PropTypes__default["default"].object])
  } : void 0;
  return Stack;
}

exports["default"] = createStack;
exports.style = style;
//# sourceMappingURL=createStack.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var style = require('./style.js');
var compose = require('./compose.js');
var spacing = require('./spacing.js');
var breakpoints = require('./breakpoints.js');
var responsivePropType = require('./responsivePropType.js');

// false positive
// eslint-disable-next-line react/function-component-definition
const gap = props => {
  if (props.gap !== undefined && props.gap !== null) {
    const transformer = spacing.createUnaryUnit(props.theme, 'spacing', 8, 'gap');
    const styleFromPropValue = propValue => ({
      gap: spacing.getValue(transformer, propValue)
    });
    return breakpoints.handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = process.env.NODE_ENV !== 'production' ? {
  gap: responsivePropType["default"]
} : {};
gap.filterProps = ['gap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const columnGap = props => {
  if (props.columnGap !== undefined && props.columnGap !== null) {
    const transformer = spacing.createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');
    const styleFromPropValue = propValue => ({
      columnGap: spacing.getValue(transformer, propValue)
    });
    return breakpoints.handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  columnGap: responsivePropType["default"]
} : {};
columnGap.filterProps = ['columnGap'];

// false positive
// eslint-disable-next-line react/function-component-definition
const rowGap = props => {
  if (props.rowGap !== undefined && props.rowGap !== null) {
    const transformer = spacing.createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');
    const styleFromPropValue = propValue => ({
      rowGap: spacing.getValue(transformer, propValue)
    });
    return breakpoints.handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = process.env.NODE_ENV !== 'production' ? {
  rowGap: responsivePropType["default"]
} : {};
rowGap.filterProps = ['rowGap'];
const gridColumn = style["default"]({
  prop: 'gridColumn'
});
const gridRow = style["default"]({
  prop: 'gridRow'
});
const gridAutoFlow = style["default"]({
  prop: 'gridAutoFlow'
});
const gridAutoColumns = style["default"]({
  prop: 'gridAutoColumns'
});
const gridAutoRows = style["default"]({
  prop: 'gridAutoRows'
});
const gridTemplateColumns = style["default"]({
  prop: 'gridTemplateColumns'
});
const gridTemplateRows = style["default"]({
  prop: 'gridTemplateRows'
});
const gridTemplateAreas = style["default"]({
  prop: 'gridTemplateAreas'
});
const gridArea = style["default"]({
  prop: 'gridArea'
});
const grid = compose["default"](gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

exports.columnGap = columnGap;
exports["default"] = grid;
exports.gap = gap;
exports.gridArea = gridArea;
exports.gridAutoColumns = gridAutoColumns;
exports.gridAutoFlow = gridAutoFlow;
exports.gridAutoRows = gridAutoRows;
exports.gridColumn = gridColumn;
exports.gridRow = gridRow;
exports.gridTemplateAreas = gridTemplateAreas;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridTemplateRows = gridTemplateRows;
exports.rowGap = rowGap;
//# sourceMappingURL=cssGrid.js.map

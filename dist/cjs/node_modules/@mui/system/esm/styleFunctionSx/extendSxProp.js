'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var deepmerge = require('../../../utils/esm/deepmerge.js');
require('../../../utils/esm/elementAcceptingRef.js');
require('../../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../../utils/esm/ponyfillGlobal.js');
require('../../../utils/esm/refType.js');
require('react');
require('../../../utils/esm/integerPropType.js');
var defaultSxConfig = require('./defaultSxConfig.js');

const _excluded = ["sx"];
const splitProps = props => {
  var _props$theme$unstable, _props$theme;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig["default"];
  Object.keys(props).forEach(prop => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
      sx: inSx
    } = props,
    other = objectWithoutPropertiesLoose["default"](props, _excluded);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === 'function') {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!deepmerge.isPlainObject(result)) {
        return systemProps;
      }
      return _extends["default"]({}, systemProps, result);
    };
  } else {
    finalSx = _extends["default"]({}, systemProps, inSx);
  }
  return _extends["default"]({}, otherProps, {
    sx: finalSx
  });
}

exports["default"] = extendSxProp;
//# sourceMappingURL=extendSxProp.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
var React = require('react');
var PropTypes = require('prop-types');
var clsx_m = require('../../../../clsx/dist/clsx.m.js');
require('../../../utils/esm/elementAcceptingRef.js');
require('../../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../../utils/esm/ponyfillGlobal.js');
require('../../../utils/esm/refType.js');
require('../../../utils/esm/integerPropType.js');
var composeClasses = require('../../../utils/esm/composeClasses/composeClasses.js');
var generateUtilityClass = require('../../../utils/esm/generateUtilityClass/generateUtilityClass.js');
var styled = require('../styled.js');
var useThemeProps = require('../useThemeProps/useThemeProps.js');
var useTheme = require('../useTheme.js');
require('../styleFunctionSx/styleFunctionSx.js');
var extendSxProp = require('../styleFunctionSx/extendSxProp.js');
require('../spacing.js');
require('../borders.js');
require('../cssGrid.js');
require('../palette.js');
require('../sizing.js');
var createTheme = require('../createTheme/createTheme.js');
var gridGenerator = require('./gridGenerator.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const _excluded = ["className", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow"];
const defaultTheme = createTheme["default"]();

// widening Theme to any so that the consumer can own the theme structure.
const defaultCreateStyledComponent = styled["default"]('div', {
  name: 'MuiGrid',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
});
function useThemePropsDefault(props) {
  return useThemeProps["default"]({
    props,
    name: 'MuiGrid',
    defaultTheme
  });
}
function createGrid(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps = useThemePropsDefault,
    componentName = 'MuiGrid'
  } = options;
  const NestedContext = /*#__PURE__*/React__namespace.createContext(false);
  const OverflowContext = /*#__PURE__*/React__namespace.createContext(undefined);
  const useUtilityClasses = (ownerState, theme) => {
    const {
      container,
      direction,
      spacing,
      wrap,
      gridSize
    } = ownerState;
    const slots = {
      root: ['root', container && 'container', wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...gridGenerator.generateDirectionClasses(direction), ...gridGenerator.generateSizeClassNames(gridSize), ...(container ? gridGenerator.generateSpacingClassNames(spacing, theme.breakpoints.keys[0]) : [])]
    };
    return composeClasses["default"](slots, slot => generateUtilityClass["default"](componentName, slot), {});
  };
  const GridRoot = createStyledComponent(gridGenerator.generateGridColumnsStyles, gridGenerator.generateGridColumnSpacingStyles, gridGenerator.generateGridRowSpacingStyles, gridGenerator.generateGridSizeStyles, gridGenerator.generateGridDirectionStyles, gridGenerator.generateGridStyles, gridGenerator.generateGridOffsetStyles);
  const Grid = /*#__PURE__*/React__namespace.forwardRef(function Grid(inProps, ref) {
    var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
    const theme = useTheme["default"]();
    const themeProps = useThemeProps(inProps);
    const props = extendSxProp["default"](themeProps); // `color` type conflicts with html color attribute.
    const nested = React__namespace.useContext(NestedContext);
    const overflow = React__namespace.useContext(OverflowContext);
    const {
        className,
        columns: columnsProp = 12,
        container = false,
        component = 'div',
        direction = 'row',
        wrap = 'wrap',
        spacing: spacingProp = 0,
        rowSpacing: rowSpacingProp = spacingProp,
        columnSpacing: columnSpacingProp = spacingProp,
        disableEqualOverflow: themeDisableEqualOverflow
      } = props,
      rest = objectWithoutPropertiesLoose["default"](props, _excluded);
    // Because `disableEqualOverflow` can be set from the theme's defaultProps, the **nested** grid should look at the instance props instead.
    let disableEqualOverflow = themeDisableEqualOverflow;
    if (nested && themeDisableEqualOverflow !== undefined) {
      disableEqualOverflow = inProps.disableEqualOverflow;
    }
    // collect breakpoints related props because they can be customized from the theme.
    const gridSize = {};
    const gridOffset = {};
    const other = {};
    Object.entries(rest).forEach(([key, val]) => {
      if (theme.breakpoints.values[key] !== undefined) {
        gridSize[key] = val;
      } else if (theme.breakpoints.values[key.replace('Offset', '')] !== undefined) {
        gridOffset[key.replace('Offset', '')] = val;
      } else {
        other[key] = val;
      }
    });
    const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : nested ? undefined : columnsProp;
    const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : nested ? undefined : spacingProp;
    const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : nested ? undefined : rowSpacingProp;
    const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : nested ? undefined : columnSpacingProp;
    const ownerState = _extends["default"]({}, props, {
      nested,
      columns,
      container,
      direction,
      wrap,
      spacing,
      rowSpacing,
      columnSpacing,
      gridSize,
      gridOffset,
      disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
      // use context value if exists.
      parentDisableEqualOverflow: overflow // for nested grid
    });

    const classes = useUtilityClasses(ownerState, theme);
    let result = /*#__PURE__*/jsxRuntime.jsx(GridRoot, _extends["default"]({
      ref: ref,
      as: component,
      ownerState: ownerState,
      className: clsx_m.clsx(classes.root, className)
    }, other));
    if (!nested) {
      result = /*#__PURE__*/jsxRuntime.jsx(NestedContext.Provider, {
        value: true,
        children: result
      });
    }
    if (disableEqualOverflow !== undefined && disableEqualOverflow !== (overflow != null ? overflow : false)) {
      // There are 2 possibilities that should wrap with the OverflowContext to communicate with the nested grids:
      // 1. It is the root grid with `disableEqualOverflow`.
      // 2. It is a nested grid with different `disableEqualOverflow` from the context.
      result = /*#__PURE__*/jsxRuntime.jsx(OverflowContext.Provider, {
        value: disableEqualOverflow,
        children: result
      });
    }
    return result;
  });
  process.env.NODE_ENV !== "production" ? Grid.propTypes /* remove-proptypes */ = {
    children: PropTypes__default["default"].node,
    className: PropTypes__default["default"].string,
    columns: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].number), PropTypes__default["default"].number, PropTypes__default["default"].object]),
    columnSpacing: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string])), PropTypes__default["default"].number, PropTypes__default["default"].object, PropTypes__default["default"].string]),
    component: PropTypes__default["default"].elementType,
    container: PropTypes__default["default"].bool,
    direction: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes__default["default"].object]),
    disableEqualOverflow: PropTypes__default["default"].bool,
    lg: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number, PropTypes__default["default"].bool]),
    lgOffset: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number]),
    md: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number, PropTypes__default["default"].bool]),
    mdOffset: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number]),
    rowSpacing: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string])), PropTypes__default["default"].number, PropTypes__default["default"].object, PropTypes__default["default"].string]),
    sm: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number, PropTypes__default["default"].bool]),
    smOffset: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number]),
    spacing: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string])), PropTypes__default["default"].number, PropTypes__default["default"].object, PropTypes__default["default"].string]),
    sx: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object, PropTypes__default["default"].bool])), PropTypes__default["default"].func, PropTypes__default["default"].object]),
    wrap: PropTypes__default["default"].oneOf(['nowrap', 'wrap-reverse', 'wrap']),
    xl: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number, PropTypes__default["default"].bool]),
    xlOffset: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number]),
    xs: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number, PropTypes__default["default"].bool]),
    xsOffset: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf(['auto']), PropTypes__default["default"].number])
  } : void 0;
  return Grid;
}

exports["default"] = createGrid;
//# sourceMappingURL=createGrid.js.map

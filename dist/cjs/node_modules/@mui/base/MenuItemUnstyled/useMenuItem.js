'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
var useId = require('../../utils/esm/useId.js');
var useForkRef = require('../../utils/esm/useForkRef.js');
require('../../utils/esm/integerPropType.js');
require('../MenuUnstyled/MenuUnstyled.js');
var MenuUnstyledContext = require('../MenuUnstyled/MenuUnstyledContext.js');
require('../MenuUnstyled/menuUnstyledClasses.js');
require('../ListboxUnstyled/useListbox.types.js');
require('../ButtonUnstyled/ButtonUnstyled.js');
require('../ButtonUnstyled/buttonUnstyledClasses.js');
var useButton = require('../ButtonUnstyled/useButton.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function useMenuItem(props) {
  var _itemState$disabled;
  const {
    disabled = false,
    ref,
    label
  } = props;
  const id = useId["default"]();
  const menuContext = React__namespace.useContext(MenuUnstyledContext["default"]);
  const itemRef = React__namespace.useRef(null);
  const handleRef = useForkRef["default"](itemRef, ref);
  if (menuContext === null) {
    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');
  }
  const {
    registerItem,
    unregisterItem,
    open
  } = menuContext;
  React__namespace.useEffect(() => {
    if (id === undefined) {
      return undefined;
    }
    registerItem(id, {
      disabled,
      id,
      ref: itemRef,
      label
    });
    return () => unregisterItem(id);
  }, [id, registerItem, unregisterItem, disabled, ref, label]);
  const {
    getRootProps: getButtonProps,
    focusVisible
  } = useButton["default"]({
    disabled,
    focusableWhenDisabled: true,
    ref: handleRef
  });

  // Ensure the menu item is focused when highlighted
  const [focusRequested, requestFocus] = React__namespace.useState(false);
  const focusIfRequested = React__namespace.useCallback(() => {
    if (focusRequested && itemRef.current != null) {
      itemRef.current.focus();
      requestFocus(false);
    }
  }, [focusRequested]);
  React__namespace.useEffect(() => {
    focusIfRequested();
  });
  React__namespace.useDebugValue({
    id,
    disabled,
    label
  });
  const itemState = menuContext.getItemState(id != null ? id : '');
  const {
    highlighted
  } = itemState != null ? itemState : {
    highlighted: false
  };
  React__namespace.useEffect(() => {
    requestFocus(highlighted && open);
  }, [highlighted, open]);
  if (id === undefined) {
    return {
      getRootProps: other => _extends["default"]({}, other, getButtonProps(other), {
        role: 'menuitem'
      }),
      disabled: false,
      focusVisible
    };
  }
  return {
    getRootProps: other => {
      const optionProps = menuContext.getItemProps(id, other);
      return _extends["default"]({}, other, getButtonProps(other), {
        tabIndex: optionProps.tabIndex,
        id: optionProps.id,
        role: 'menuitem'
      });
    },
    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
    focusVisible
  };
}

exports["default"] = useMenuItem;
//# sourceMappingURL=useMenuItem.js.map

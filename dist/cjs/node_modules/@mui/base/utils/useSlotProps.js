'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var objectWithoutPropertiesLoose = require('../../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js');
require('../../utils/esm/elementAcceptingRef.js');
require('../../utils/esm/elementTypeAcceptingRef.js');
require('react-is');
require('../../utils/esm/ponyfillGlobal.js');
require('../../utils/esm/refType.js');
require('react');
var useForkRef = require('../../utils/esm/useForkRef.js');
require('../../utils/esm/integerPropType.js');
var appendOwnerState = require('./appendOwnerState.js');
var mergeSlotProps = require('./mergeSlotProps.js');
var resolveComponentProps = require('./resolveComponentProps.js');

const _excluded = ["elementType", "externalSlotProps", "ownerState"];
/**
 * @ignore - do not document.
 * Builds the props to be passed into the slot of an unstyled component.
 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
 * If the slot component is not a host component, it also merges in the `ownerState`.
 *
 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
 */
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
      elementType,
      externalSlotProps,
      ownerState
    } = parameters,
    rest = objectWithoutPropertiesLoose["default"](parameters, _excluded);
  const resolvedComponentsProps = resolveComponentProps["default"](externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps["default"](_extends["default"]({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = useForkRef["default"](internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = appendOwnerState["default"](elementType, _extends["default"]({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}

exports["default"] = useSlotProps;
//# sourceMappingURL=useSlotProps.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../utilities/globals/index.js');
var ApolloClient = require('./ApolloClient.js');
var ObservableQuery = require('./ObservableQuery.js');
var networkStatus = require('./networkStatus.js');
var index = require('../errors/index.js');
var cache = require('../cache/core/cache.js');
var common = require('../cache/core/types/common.js');
var storeUtils = require('../utilities/graphql/storeUtils.js');
require('../utilities/graphql/transform.js');
require('../utilities/common/mergeDeep.js');
require('../utilities/observables/Observable.js');
require('../utilities/observables/Concast.js');
require('../utilities/common/canUse.js');
require('../cache/inmemory/entityStore.js');
var inMemoryCache = require('../cache/inmemory/inMemoryCache.js');
var reactiveVars = require('../cache/inmemory/reactiveVars.js');
require('../cache/inmemory/policies.js');
require('../cache/inmemory/object-canon.js');
require('../../../optimism/lib/bundle.esm.js');
require('../link/core/empty.js');
require('../link/core/from.js');
require('../link/core/split.js');
require('../link/core/concat.js');
var execute = require('../link/core/execute.js');
var ApolloLink = require('../link/core/ApolloLink.js');
var createHttpLink = require('../link/http/createHttpLink.js');
var HttpLink = require('../link/http/HttpLink.js');
var invariant = require('../../../ts-invariant/lib/invariant.js');
var index$1 = require('../../../graphql-tag/lib/index.js');
var DEV = require('../utilities/globals/DEV.js');

invariant.setVerbosity(DEV["default"] ? "log" : "silent");

exports.ApolloClient = ApolloClient.ApolloClient;
exports.ObservableQuery = ObservableQuery.ObservableQuery;
Object.defineProperty(exports, 'NetworkStatus', {
	enumerable: true,
	get: function () { return networkStatus.NetworkStatus; }
});
exports.ApolloError = index.ApolloError;
exports.isApolloError = index.isApolloError;
exports.ApolloCache = cache.ApolloCache;
exports.MissingFieldError = common.MissingFieldError;
exports.isReference = storeUtils.isReference;
exports.makeReference = storeUtils.makeReference;
exports.InMemoryCache = inMemoryCache.InMemoryCache;
exports.makeVar = reactiveVars.makeVar;
exports.execute = execute.execute;
exports.ApolloLink = ApolloLink.ApolloLink;
exports.createHttpLink = createHttpLink.createHttpLink;
exports.HttpLink = HttpLink.HttpLink;
exports.setLogVerbosity = invariant.setVerbosity;
exports.disableExperimentalFragmentVariables = index$1.disableExperimentalFragmentVariables;
exports.disableFragmentWarnings = index$1.disableFragmentWarnings;
exports.enableExperimentalFragmentVariables = index$1.enableExperimentalFragmentVariables;
Object.defineProperty(exports, 'gql', {
	enumerable: true,
	get: function () { return index$1.gql; }
});
exports.resetCaches = index$1.resetCaches;
//# sourceMappingURL=index.js.map

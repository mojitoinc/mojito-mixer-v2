'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../../../tslib/tslib.es6.js');
require('../../utilities/globals/index.js');
require('../core/empty.js');
require('../core/from.js');
require('../core/split.js');
require('../core/concat.js');
require('../core/execute.js');
var ApolloLink = require('../core/ApolloLink.js');
var directives = require('../../utilities/graphql/directives.js');
require('../../utilities/graphql/storeUtils.js');
require('../../utilities/graphql/transform.js');
require('../../utilities/common/mergeDeep.js');
require('../../utilities/observables/Observable.js');
require('../../utilities/observables/Concast.js');
require('../../utilities/common/canUse.js');
var serializeFetchParameter = require('./serializeFetchParameter.js');
var selectURI = require('./selectURI.js');
var parseAndCheckHttpResponse = require('./parseAndCheckHttpResponse.js');
var checkFetcher = require('./checkFetcher.js');
var selectHttpOptionsAndBody = require('./selectHttpOptionsAndBody.js');
var createSignalIfSupported = require('./createSignalIfSupported.js');
var rewriteURIForGET = require('./rewriteURIForGET.js');
var fromError = require('../utils/fromError.js');
var maybe = require('../../utilities/globals/maybe.js');
var visitor = require('../../../../graphql/language/visitor.mjs.js');
var module$1 = require('../../../../zen-observable-ts/module.js');

var backupFetch = maybe.maybe(function () { return fetch; });
var createHttpLink = function (linkOptions) {
    if (linkOptions === void 0) { linkOptions = {}; }
    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? selectHttpOptionsAndBody.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = tslib_es6.__rest(linkOptions, ["uri", "fetch", "print", "includeExtensions", "preserveHeaderCase", "useGETForQueries", "includeUnusedVariables"]);
    if (__DEV__) {
        checkFetcher.checkFetcher(preferredFetch || backupFetch);
    }
    var linkConfig = {
        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },
        options: requestOptions.fetchOptions,
        credentials: requestOptions.credentials,
        headers: requestOptions.headers,
    };
    return new ApolloLink.ApolloLink(function (operation) {
        var chosenURI = selectURI.selectURI(operation, uri);
        var context = operation.getContext();
        var clientAwarenessHeaders = {};
        if (context.clientAwareness) {
            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;
            if (name_1) {
                clientAwarenessHeaders['apollographql-client-name'] = name_1;
            }
            if (version) {
                clientAwarenessHeaders['apollographql-client-version'] = version;
            }
        }
        var contextHeaders = tslib_es6.__assign(tslib_es6.__assign({}, clientAwarenessHeaders), context.headers);
        var contextConfig = {
            http: context.http,
            options: context.fetchOptions,
            credentials: context.credentials,
            headers: contextHeaders,
        };
        var _b = selectHttpOptionsAndBody.selectHttpOptionsAndBodyInternal(operation, print, selectHttpOptionsAndBody.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
        if (body.variables && !includeUnusedVariables) {
            var unusedNames_1 = new Set(Object.keys(body.variables));
            visitor.visit(operation.query, {
                Variable: function (node, _key, parent) {
                    if (parent && parent.kind !== 'VariableDefinition') {
                        unusedNames_1.delete(node.name.value);
                    }
                },
            });
            if (unusedNames_1.size) {
                body.variables = tslib_es6.__assign({}, body.variables);
                unusedNames_1.forEach(function (name) {
                    delete body.variables[name];
                });
            }
        }
        var controller;
        if (!options.signal) {
            var _c = createSignalIfSupported.createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
            controller = _controller;
            if (controller)
                options.signal = signal;
        }
        var definitionIsMutation = function (d) {
            return d.kind === 'OperationDefinition' && d.operation === 'mutation';
        };
        if (useGETForQueries &&
            !operation.query.definitions.some(definitionIsMutation)) {
            options.method = 'GET';
        }
        if (directives.hasDirectives(['defer'], operation.query)) {
            options.headers.accept = "multipart/mixed; deferSpec=20220824, application/json";
        }
        if (options.method === 'GET') {
            var _d = rewriteURIForGET.rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
            if (parseError) {
                return fromError.fromError(parseError);
            }
            chosenURI = newURI;
        }
        else {
            try {
                options.body = serializeFetchParameter.serializeFetchParameter(body, 'Payload');
            }
            catch (parseError) {
                return fromError.fromError(parseError);
            }
        }
        return new module$1.Observable(function (observer) {
            var currentFetch = preferredFetch || maybe.maybe(function () { return fetch; }) || backupFetch;
            currentFetch(chosenURI, options)
                .then(function (response) {
                var _a;
                operation.setContext({ response: response });
                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');
                if (ctype !== null && /^multipart\/mixed/i.test(ctype)) {
                    return parseAndCheckHttpResponse.readMultipartBody(response, observer);
                }
                else {
                    return parseAndCheckHttpResponse.readJsonBody(response, operation, observer);
                }
            })
                .catch(function (err) { return parseAndCheckHttpResponse.handleError(err, observer); });
            return function () {
                if (controller)
                    controller.abort();
            };
        });
    });
};

exports.createHttpLink = createHttpLink;
//# sourceMappingURL=createHttpLink.js.map
